{"version":3,"sources":["components/authentication/password-reset/PasswordResetAmplify.js","pages/authentication/PasswordReset.js"],"names":["PasswordResetAmplify","mounted","useMounted","useParams","id","token","navigate","useAuth","passwordReset","useLocation","useNavigate","itemsRef","useRef","useEffect","current","slice","initialValues","password","passwordConfirm","submit","validationSchema","Yup","shape","min","max","required","oneOf","onSubmit","values","a","setErrors","setStatus","setSubmitting","data","customAxios","postCalls","res","console","log","status","toast","success","error","message","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","setFieldValue","noValidate","TextField","Boolean","fullWidth","helperText","label","margin","name","onBlur","onChange","type","value","variant","Box","sx","mt","FormHelperText","Button","color","disabled","size","platformIcons","Amplify","Auth0","Firebase","JWT","PasswordReset","platform","userValid","fetch","method","headers","json","gtm","push","event","backgroundColor","display","flexDirection","minHeight","AuthBanner","Container","maxWidth","py","justifyContent","to","Logo","height","width","mb","Card","CardContent","p","alignItems","Typography","gutterBottom","maxHeight","alt","src","flexGrow","Divider","my","Link","component","RouterLink"],"mappings":"8WAuQeA,EAvPc,WAC3B,IAAMC,EAAUC,cAChB,EAAsBC,cAAdC,EAAR,EAAQA,GAAIC,EAAZ,EAAYA,MAGNC,GAFoBC,cAAlBC,cACSC,cACAC,eACXC,EAAWC,iBAAO,IAMxB,OAJAC,qBAAU,WACRF,EAASG,QAAUH,EAASG,QAAQC,MAAM,EAAG,KAC5C,IAGD,cAAC,IAAD,CACEC,cAAe,CAGbC,SAAU,GACVC,gBAAiB,GACjBC,OAAQ,MAEVC,iBAAkBC,MAAaC,MAAM,CASnCL,SAAUI,MACPE,IAAI,EAAG,iCACPC,IAAI,KACJC,SAAS,YACZP,gBAAiBG,MACdK,MAAM,CAACL,IAAQ,YAAa,MAAO,wBACnCI,SAAS,cAEdE,SAAQ,uCAAE,WAAOC,EAAP,0BAAAC,EAAA,6DAAiBC,EAAjB,EAAiBA,UAAWC,EAA5B,EAA4BA,UAAWC,EAAvC,EAAuCA,cAAvC,SAIAC,EAAOL,EAAOX,SAJd,SAMYiB,IAAYC,UAAZ,mBAAkC/B,EAAlC,YAAwCC,GAAS,CACjE4B,SAPI,OAMAG,EANA,OASNC,QAAQC,IAAIF,GACM,KAAdA,EAAIG,QACNC,IAAMC,QAAQ,oBACdnC,EAAS,MAETkC,IAAME,MAAM,qCAdR,kDAoBNL,QAAQK,MAAR,MACIzC,EAAQa,UACViB,EAAU,CAAEU,SAAS,IACrBX,EAAU,CAAEX,OAAQ,KAAIwB,UACxBX,GAAc,IAxBV,0DAAF,wDAzBV,SAsDG,gBACCY,EADD,EACCA,OACAC,EAFD,EAECA,WACAC,EAHD,EAGCA,aACAC,EAJD,EAICA,aACAC,EALD,EAKCA,aAEAC,GAPD,EAMCC,cAND,EAOCD,SACArB,EARD,EAQCA,OARD,OAUC,uBAAMuB,YAAU,EAACxB,SAAUoB,EAA3B,UAyHE,cAACK,EAAA,EAAD,CACEV,MAAOW,QAAQJ,EAAQhC,UAAY2B,EAAO3B,UAC1CqC,WAAS,EACTC,WAAYN,EAAQhC,UAAY2B,EAAO3B,SACvCuC,MAAM,WACNC,OAAO,SACPC,KAAK,WACLC,OAAQd,EACRe,SAAUd,EACVe,KAAK,WACLC,MAAOlC,EAAOX,SACd8C,QAAQ,aAEV,cAACX,EAAA,EAAD,CACEV,MAAOW,QAAQJ,EAAQ/B,iBAAmB0B,EAAO1B,iBACjDoC,WAAS,EACTC,WAAYN,EAAQ/B,iBAAmB0B,EAAO1B,gBAC9CsC,MAAM,wBACNC,OAAO,SACPC,KAAK,kBACLC,OAAQd,EACRe,SAAUd,EACVe,KAAK,WACLC,MAAOlC,EAAOV,gBACd6C,QAAQ,aAETnB,EAAOzB,QACN,cAAC6C,EAAA,EAAD,CAAKC,GAAI,CAAEC,GAAI,GAAf,SACE,cAACC,EAAA,EAAD,CAAgBzB,OAAK,EAArB,SAAuBE,EAAOzB,WAGlC,cAAC6C,EAAA,EAAD,CAAKC,GAAI,CAAEC,GAAI,GAAf,SACE,cAACE,EAAA,EAAD,CACEC,MAAM,UACNC,SAAUtB,EACVM,WAAS,EACTiB,KAAK,QACLV,KAAK,SACLE,QAAQ,YANV,2B,iBCpONS,EAAgB,CACpBC,QAAS,4BACTC,MAAO,0BACPC,SAAU,6BACVC,IAAK,yBAoIQC,UAjIO,WACpB,MAAsB1E,cAAdC,EAAR,EAAQA,GAAIC,EAAZ,EAAYA,MACJyE,EAAavE,cAAbuE,SACFxE,EAAWI,cACXqE,EAAS,uCAAG,4BAAAlD,EAAA,sEACEmD,MAAM,4BAAD,OAA6B5E,EAA7B,YAAmCC,GAAS,CACjE4E,OAAQ,MACRC,QAAS,CACP,eAAgB,sBAJJ,cACV9C,EADU,gBAQGA,EAAI+C,OARP,OAUG,KAVH,OAUP5C,OACPF,QAAQC,IAAI,cAEZhC,EAAS,KAbK,2CAAH,qDAyBf,OATAO,qBAAU,WACRuE,IAAIC,KAAK,CAAEC,MAAO,gBACjB,IACHzE,qBAAU,WACRkE,MAIC,IAED,qCACE,cAAC,IAAD,UACE,wEAEF,eAACf,EAAA,EAAD,CACEC,GAAI,CACFsB,gBAAiB,qBACjBC,QAAS,OACTC,cAAe,SACfC,UAAW,SALf,UAQE,cAACC,EAAA,EAAD,IACA,eAACC,EAAA,EAAD,CAAWC,SAAS,KAAK5B,GAAI,CAAE6B,GAAI,IAAnC,UACE,cAAC9B,EAAA,EAAD,CACEC,GAAI,CACFuB,QAAS,OACTO,eAAgB,UAHpB,SAME,cAAC,IAAD,CAAYC,GAAG,IAAf,SACE,cAACC,EAAA,EAAD,CACEhC,GAAI,CACFiC,OAAQ,GACRC,MAAO,UAKf,cAACnC,EAAA,EAAD,CACEC,GAAI,CACFuB,QAAS,OACTO,eAAgB,SAChBK,GAAI,KAGR,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CACErC,GAAI,CACFuB,QAAS,OACTC,cAAe,SACfc,EAAG,GAJP,UAOE,eAACvC,EAAA,EAAD,CACEC,GAAI,CACFuC,WAAY,SACZhB,QAAS,OACTO,eAAgB,gBAChBK,GAAI,GALR,UAQE,gCACE,cAACK,EAAA,EAAD,CAAYpC,MAAM,cAAcqC,cAAY,EAAC3C,QAAQ,KAArD,4BAGA,cAAC0C,EAAA,EAAD,CAAYpC,MAAM,gBAAgBN,QAAQ,QAA1C,4DAIF,cAACC,EAAA,EAAD,CACEC,GAAI,CACFiC,OAAQ,GACR,UAAW,CACTS,UAAW,OACXR,MAAO,SALb,SASE,qBAAKS,IAAI,gBAAgBC,IAAKrC,EAAcM,UAGhD,cAACd,EAAA,EAAD,CACEC,GAAI,CACF6C,SAAU,EACV5C,GAAI,GAHR,SAMgB,QAAbY,GAAsB,cAAC,EAAD,MAEzB,cAACiC,EAAA,EAAD,CAAS9C,GAAI,CAAE+C,GAAI,KACL,YAAblC,GACC,cAACmC,EAAA,EAAD,CACE5C,MAAM,gBACN6C,UAAWC,IACXnB,GAAG,oCACHjC,QAAQ,QAJV","file":"static/js/111.5281f177.chunk.js","sourcesContent":["import { useEffect, useRef } from \"react\";\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport { Formik } from \"formik\";\nimport {\n  Box,\n  Button,\n  FormHelperText,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport useAuth from \"../../../hooks/useAuth\";\nimport useMounted from \"../../../hooks/useMounted\";\nimport { customAxios } from \"../../../mangement/apis/Axios\";\nimport toast from \"react-hot-toast\";\n\nconst PasswordResetAmplify = () => {\n  const mounted = useMounted();\n  const { id, token } = useParams();\n  const { passwordReset } = useAuth();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const itemsRef = useRef([]);\n\n  useEffect(() => {\n    itemsRef.current = itemsRef.current.slice(0, 6);\n  }, []);\n\n  return (\n    <Formik\n      initialValues={{\n        // code: ['', '', '', '', '', ''],\n        // email: location.state?.username || '',\n        password: \"\",\n        passwordConfirm: \"\",\n        submit: null,\n      }}\n      validationSchema={Yup.object().shape({\n        // code: Yup\n        //   .array()\n        //   .of(Yup.string().required('Code is required')),\n        // email: Yup\n        //   .string()\n        //   .email('Must be a valid email')\n        //   .max(255)\n        //   .required('Email is required'),\n        password: Yup.string()\n          .min(7, \"Must be at least 7 characters\")\n          .max(255)\n          .required(\"Required\"),\n        passwordConfirm: Yup.string()\n          .oneOf([Yup.ref(\"password\"), null], \"Passwords must match\")\n          .required(\"Required\"),\n      })}\n      onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\n        // console.log(values.password);\n        // return;\n        try {\n          const data = values.password ;\n          // await passwordReset(values.email, values.code.join(''), values.password);\n          const res = await customAxios.postCalls(`register/${id}/${token}`, {\n            data\n          });\n          console.log(res)\n          if (res.status == 201) {\n            toast.success(\"Password Updated\")\n            navigate(\"/\")\n          } else {\n            toast.error(\"! Token Expired generate new LInk\");\n          }\n          // console.log(values);\n\n          // navigate(\"/authentication/password-recovery\");\n        } catch (err) {\n          console.error(err);\n          if (mounted.current) {\n            setStatus({ success: false });\n            setErrors({ submit: err.message });\n            setSubmitting(false);\n          }\n        }\n      }}\n    >\n      {({\n        errors,\n        handleBlur,\n        handleChange,\n        handleSubmit,\n        isSubmitting,\n        setFieldValue,\n        touched,\n        values,\n      }) => (\n        <form noValidate onSubmit={handleSubmit}>\n          {/* {!location.state?.username\n            ? ( */}\n          {/* <TextField\n              autoComplete='off'\n                autoFocus\n                error={Boolean(touched.email && errors.email)}\n                fullWidth\n                helperText={touched.email && errors.email}\n                label=\"Email Address\"\n                margin=\"normal\"\n                name=\"email\"\n                onBlur={handleBlur}\n                onChange={handleChange}\n                type=\"email\"\n                value={values.email}\n                variant=\"outlined\"\n              /> */}\n          {/* ) \n            // : (\n            //   <TextField\n            //     disabled\n            //     fullWidth\n            //     margin=\"normal\"\n            //     value={location.state.username}\n            //     variant=\"outlined\"\n            //   />\n            // )}\n          {/* <Typography\n            color=\"textSecondary\"\n            sx={{\n              mb: 2,\n              mt: 3\n            }}\n            variant=\"subtitle2\"\n          >\n            Verification code\n          </Typography> */}\n          {/* <Box\n            sx={{\n              columnGap: '16px',\n              display: 'grid',\n              gridTemplateColumns: 'repeat(7, 1fr)',\n              py: 1\n            }}\n          >\n            {[1, 2, 3, 4, 5, 6].map((ref, i) => (\n              <TextField\n                error={Boolean(Array.isArray(touched.code)\n                  && touched.code.length === 6\n                  && errors.code)}\n                fullWidth\n                inputRef={(el) => itemsRef.current[i] = el}\n                // eslint-disable-next-line react/no-array-index-key\n                key={`codeNumber-${i}`}\n                name={`code[${i}]`}\n                onBlur={handleBlur}\n                onKeyDown={(event) => {\n                  if (event.code === 'ENTER') {\n                    if (values.code[i]) {\n                      setFieldValue(`code[${i}]`, '');\n                      return;\n                    }\n\n                    if (i > 0) {\n                      setFieldValue(`code[${i}]`, '');\n                      itemsRef.current[i - 1].focus();\n                      return;\n                    }\n                  }\n\n                  if (Number.isInteger(parseInt(event.key, 10))) {\n                    setFieldValue(`code[${i}]`, event.key);\n\n                    if (i < 5) {\n                      itemsRef.current[i + 1].focus();\n                    }\n                  }\n                }}\n                onPaste={(event) => {\n                  const paste = event.clipboardData.getData('text');\n                  const pasteArray = paste.split('');\n\n                  if (pasteArray.length !== 6) {\n                    return;\n                  }\n\n                  let valid = true;\n\n                  pasteArray.forEach((x) => {\n                    if (!Number.isInteger(parseInt(x, 10))) {\n                      valid = false;\n                    }\n                  });\n\n                  if (valid) {\n                    setFieldValue('code', pasteArray);\n                    itemsRef.current[5].focus();\n                  }\n                }}\n                value={values.code[i]}\n                sx={{\n                  display: 'inline-block',\n                  textAlign: 'center',\n                  '& .MuiInputBase-input': {\n                    textAlign: 'center'\n                  }\n                }}\n                variant=\"outlined\"\n              />\n            ))}\n          </Box>\n          {Boolean(Array.isArray(touched.code) && touched.code.length === 6 && errors.code) && (\n            <FormHelperText\n              error\n              sx={{ mx: '14px' }}\n            >\n              {Array.isArray(errors.code) && errors.code.find((x) => x !== undefined)}\n            </FormHelperText>\n          )}\n          */}\n          <TextField\n            error={Boolean(touched.password && errors.password)}\n            fullWidth\n            helperText={touched.password && errors.password}\n            label=\"Password\"\n            margin=\"normal\"\n            name=\"password\"\n            onBlur={handleBlur}\n            onChange={handleChange}\n            type=\"password\"\n            value={values.password}\n            variant=\"outlined\"\n          />\n          <TextField\n            error={Boolean(touched.passwordConfirm && errors.passwordConfirm)}\n            fullWidth\n            helperText={touched.passwordConfirm && errors.passwordConfirm}\n            label=\"Password Confirmation\"\n            margin=\"normal\"\n            name=\"passwordConfirm\"\n            onBlur={handleBlur}\n            onChange={handleChange}\n            type=\"password\"\n            value={values.passwordConfirm}\n            variant=\"outlined\"\n          />\n          {errors.submit && (\n            <Box sx={{ mt: 3 }}>\n              <FormHelperText error>{errors.submit}</FormHelperText>\n            </Box>\n          )}\n          <Box sx={{ mt: 3 }}>\n            <Button\n              color=\"primary\"\n              disabled={isSubmitting}\n              fullWidth\n              size=\"large\"\n              type=\"submit\"\n              variant=\"contained\"\n            >\n              Send\n            </Button>\n          </Box>\n        </form>\n      )}\n    </Formik>\n  );\n};\n\nexport default PasswordResetAmplify;\n","import { useEffect } from \"react\";\nimport { Link as RouterLink, useNavigate, useParams } from \"react-router-dom\";\nimport { Helmet } from \"react-helmet-async\";\nimport {\n  Box,\n  Card,\n  CardContent,\n  Container,\n  Divider,\n  Link,\n  Typography,\n} from \"@material-ui/core\";\nimport AuthBanner from \"../../components/authentication/AuthBanner\";\nimport { PasswordResetAmplify } from \"../../components/authentication/password-reset\";\nimport Logo from \"../../components/Logo\";\nimport useAuth from \"../../hooks/useAuth\";\nimport gtm from \"../../lib/gtm\";\n\nconst platformIcons = {\n  Amplify: \"/static/icons/amplify.svg\",\n  Auth0: \"/static/icons/auth0.svg\",\n  Firebase: \"/static/icons/firebase.svg\",\n  JWT: \"/static/icons/jwt.svg\",\n};\n\nconst PasswordReset = () => {\n  const { id, token } = useParams();\n  const { platform } = useAuth();\n  const navigate = useNavigate();\n  const userValid = async () => {\n    const res = await fetch(`/register/reset-password/${id}/${token}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    const data = await res.json();\n\n    if (data.status == 201) {\n      console.log(\"user valid\");\n    } else {\n      navigate(\"*\");\n    }\n  };\n  useEffect(() => {\n    gtm.push({ event: \"page_view\" });\n  }, []);\n  useEffect(() => {\n    userValid();\n    // setTimeout(() => {\n    //   setData(true);\n    // }, 3000);\n  }, []);\n  return (\n    <>\n      <Helmet>\n        <title>Password Reset | Material Kit Pro</title>\n      </Helmet>\n      <Box\n        sx={{\n          backgroundColor: \"background.default\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          minHeight: \"100vh\",\n        }}\n      >\n        <AuthBanner />\n        <Container maxWidth=\"sm\" sx={{ py: 10 }}>\n          <Box\n            sx={{\n              display: \"flex\",\n              justifyContent: \"center\",\n            }}\n          >\n            <RouterLink to=\"/\">\n              <Logo\n                sx={{\n                  height: 40,\n                  width: 40,\n                }}\n              />\n            </RouterLink>\n          </Box>\n          <Box\n            sx={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              mb: 8,\n            }}\n          />\n          <Card>\n            <CardContent\n              sx={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                p: 4,\n              }}\n            >\n              <Box\n                sx={{\n                  alignItems: \"center\",\n                  display: \"flex\",\n                  justifyContent: \"space-between\",\n                  mb: 3,\n                }}\n              >\n                <div>\n                  <Typography color=\"textPrimary\" gutterBottom variant=\"h4\">\n                    Password Reset\n                  </Typography>\n                  <Typography color=\"textSecondary\" variant=\"body2\">\n                    Reset your account password using your code\n                  </Typography>\n                </div>\n                <Box\n                  sx={{\n                    height: 32,\n                    \"& > img\": {\n                      maxHeight: \"100%\",\n                      width: \"auto\",\n                    },\n                  }}\n                >\n                  <img alt=\"Auth platform\" src={platformIcons[platform]} />\n                </Box>\n              </Box>\n              <Box\n                sx={{\n                  flexGrow: 1,\n                  mt: 3,\n                }}\n              >\n                {platform === \"JWT\" && <PasswordResetAmplify />}\n              </Box>\n              <Divider sx={{ my: 3 }} />\n              {platform === \"Amplify\" && (\n                <Link\n                  color=\"textSecondary\"\n                  component={RouterLink}\n                  to=\"/authentication/password-recovery\"\n                  variant=\"body2\"\n                >\n                  Did you not receive the code?\n                </Link>\n              )}\n            </CardContent>\n          </Card>\n        </Container>\n      </Box>\n    </>\n  );\n};\n\nexport default PasswordReset;\n"],"sourceRoot":""}