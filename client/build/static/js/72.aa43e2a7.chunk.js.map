{"version":3,"sources":["mangement/Exams/ExamsmarksList.js","mangement/Exams/ExamsmarkInput1.js","mangement/Exams/Examsmark.js","icons/Download.js","icons/Upload.js","mangement/apis/Api.js","mangement/HelperFunction.js"],"names":["useStyles","makeStyles","table","minWidth","StudentToExamsList","props","student","onSave","Omarks","studentsMarks","setStudent","other","classes","useState","ObtMarks","omarks","setMarks","setError","useEffect","console","log","initialValues","submit","validationSchema","Yup","shape","onSubmit","values","a","setErrors","setStatus","setSubmitting","err","error","message","errors","handleBlur","handleChange","handleSubmit","isSubmitting","setFieldValue","setFieldTouched","touched","length","sx","p","mt","className","aria-label","colSpan","map","row","index","component","rollno","name","gender","fname","onChange","e","data","target","value","hamdleChange","type","placeholder","id","style","display","justifyContent","marginTop","flexGrow","color","disabled","variant","hedds","width","margin","border","borderRadius","feild","marginLeft","feilds","marginBottom","ExamsmarkInput1","allStudentAttendence","setmarksFeild","ref","useRef","first","setfirst","examgroup","setExamgroup","examsName","setExamsName","classRoom","setClassRoom","section","setSection","subject","setsubject","customAxios","getCall","examsGroupData","examsNameData","Section","then","res","datas","getCalls","params","current","examsGroup","classid","sectionid","Subject","innerRef","alert","JSON","stringify","fullWidth","labelId","label","option","handleChanges","subjectName","mr","ml","Examsmark","settings","useSettings","students","setStudentsMarks","marksFeild","marksFeildCopy","studentMarksCopy","combine","studentMarks","postCall","status","toast","success","studentData","backgroundColor","minHeight","py","maxWidth","compact","container","spacing","item","separator","fontSize","RouterLink","to","mb","mx","startIcon","m","selectedStudentCopy","obj","Student_id","student_id","minMarks","maxMarks","Obtmarks","findIndex","push","Download","createSvgIcon","xmlns","viewBox","fill","fillRule","d","clipRule","Upload","token","parse","localStorage","getItem","axios","create","baseURL","headers","authorization","interceptors","response","use","Promise","resolve","reject","endpoint","responce"],"mappings":"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","file":"static/js/72.aa43e2a7.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as Yup from \"yup\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  FormHelperText,\r\n  TextField,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Divider,\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormLabel,\r\n  Radio,\r\n  RadioGroup,\r\n} from \"@material-ui/core\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport { Field, Formik } from \"formik\";\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n});\r\n\r\nconst StudentToExamsList = (props) => {\r\n  const { student, Omarks, onSave, studentsMarks,setStudent, ...other } =\r\n    props;\r\n  const classes = useStyles();\r\n  const [omarks, setMarks] = useState({\r\n    ObtMarks:\"\"\r\n  });\r\n\r\n  const hamdleChange = (e,index) => {\r\n    let data=[...student]\r\n    setMarks(data[index][e.target.name] = e.target.value);\r\n    setStudent(data)\r\n    //  setMarks({\r\n    //    ...omarks,\r\n    //    [e.target.name]: e.target.value,\r\n    //  });\r\n    console.log(e.target.value);\r\n  };\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(()=>{\r\n    console.log(omarks)\r\n  },[omarks])\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        ObtMarks: omarks,\r\n        submit: null,\r\n      }}\r\n      validationSchema={Yup.object().shape({})}\r\n      onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n        try {\r\n          // alert(JSON.stringify(values));\r\n          // alert(\"Save Here\");\r\n          if (onSave) {\r\n            onSave();\r\n          }\r\n        } catch (err) {\r\n          console.error(err);\r\n          setError(err.message);\r\n        }\r\n      }}\r\n    >\r\n      {({\r\n        errors,\r\n        handleBlur,\r\n        handleChange,\r\n        handleSubmit,\r\n        isSubmitting,\r\n        setFieldValue,\r\n        setFieldTouched,\r\n        touched,\r\n        values,\r\n      }) => (\r\n        <form onSubmit={handleSubmit} {...other}>\r\n          {student.length > 0 && (\r\n            <Card sx={{ p: 3, mt: 2 }}>\r\n              {/* <AttendenceTable student={student} /> */}\r\n\r\n              <Divider />\r\n              <TableContainer>\r\n                <Table className={classes.table} aria-label=\"simple table\">\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>Roll No</TableCell>\r\n                      <TableCell colSpan={1}>Student Name</TableCell>\r\n                      <TableCell colSpan={1}>Gender</TableCell>\r\n                      <TableCell colSpan={1}>Father Name</TableCell>\r\n                      {/* <TableCell colSpan={1}>Absent</TableCell> */}\r\n                      <TableCell>Marks Obtain </TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {\r\n                      student.length > 0\r\n                        ? student.map((row, index) => (\r\n                            <TableRow key={row.id}>\r\n                              {/* {console.log(row)} */}\r\n                              <TableCell component=\"th\">{row.rollno}</TableCell>\r\n                              <TableCell\r\n                              // id=\"\"\r\n                              //  value={values.id}\r\n                              >\r\n                                {`${row.name}`}\r\n                              </TableCell>\r\n                              <TableCell>{row.gender}</TableCell>\r\n\r\n                              <TableCell>{row.fname}</TableCell>\r\n\r\n                              <TableCell>\r\n                                <TextField\r\n                                  onChange={(e) => {\r\n                                    hamdleChange(e, index);\r\n                                    studentsMarks(row, e.target.value);\r\n                                  }}\r\n                                  value={ omarks.ObtMarks}\r\n                                  // id={row.id}\r\n                                  name=\"ObtMarks\"\r\n                                  type=\"number\"\r\n                                  placeholder=\"Enter Marks\"\r\n                                />\r\n                              </TableCell>\r\n                            </TableRow>\r\n                          ))\r\n                        : null\r\n                      // <TableRow\r\n                      //   style={{\r\n                      //     display: \"flex\",\r\n                      //     justifyContent: \"center\",\r\n                      //     alignItems: \"center\",\r\n                      //   }}\r\n                      // >\r\n                      //   Data Not Found{\" \"}\r\n                      // </TableRow>\r\n                    }\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n\r\n              <Box\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"flex-end\",\r\n                  marginTop: 10,\r\n                }}\r\n              >\r\n                <Box sx={{ flexGrow: 1 }} />\r\n                <Button\r\n                  color=\"primary\"\r\n                  disabled={isSubmitting}\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                >\r\n                  Save\r\n                </Button>\r\n              </Box>\r\n            </Card>\r\n          )}\r\n        </form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\n// StudentToExamsList.propTypes = {\r\n//   onBack: PropTypes.func,\r\n//   onComplete: PropTypes.func,\r\n// };\r\n\r\nexport default StudentToExamsList;\r\n","import React from \"react\";\r\nimport * as Yup from \"yup\";\r\nimport {\r\n  Box,\r\n  Card,\r\n  TextField,\r\n  Typography,\r\n  MenuItem,\r\n  Button,\r\n  FormControl,\r\n  Select,\r\n  InputLabel,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Formik } from \"formik\";\r\nimport { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Section } from \"../HelperFunction\";\r\nimport ExamsmarksList from \"./ExamsmarksList\";\r\nimport { useRef } from \"react\";\r\nimport {customAxios} from \"../apis/Axios\";\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 700,\r\n    // marginTop:10\r\n  },\r\n  hedds: {\r\n    width: \"20%\",\r\n    // padding: \"12px 20px\",\r\n    margin: \"8px 10px\",\r\n    display: \"inline-block\",\r\n    border: \"1px solid #ccc\",\r\n    borderRadius: \"4px\",\r\n    // box-sizing:,\r\n  },\r\n  feild: {\r\n    width: \"20%\",\r\n    marginLeft: 8,\r\n  },\r\n  feilds: {\r\n    width: \"20%\",\r\n    marginLeft: 8,\r\n    // marginTop: 8,\r\n    marginBottom: 10,\r\n  },\r\n});\r\n\r\nconst ExamsmarkInput1 = ({\r\n  student,\r\n  allStudentAttendence,\r\n  setStudent,\r\n  studentsMarks,\r\n  onSave,\r\n  setmarksFeild,\r\n}) => {\r\n  const classes = useStyles();\r\n  const ref = useRef(null);\r\n  const [first, setfirst] = useState([]);\r\n\r\n  const [examgroup, setExamgroup] = useState([]);\r\n  const [examsName, setExamsName] = useState([]);\r\n  const [classRoom, setClassRoom] = useState([]);\r\n  const [section, setSection] = useState([]);\r\n  const [subject, setsubject] = useState([]);\r\n  useEffect(async () => {\r\n    const examsGroupData = await customAxios.getCall(\r\n      \"exams/examsgroup\"\r\n    );\r\n    setExamgroup(examsGroupData);\r\n\r\n    const examsNameData = await customAxios.getCall(\r\n      \"exams/examsName\"\r\n    );\r\n    setExamsName(examsNameData);\r\n\r\n    const fun = Section(\"class/api\");\r\n    fun.then((res) => {\r\n      setClassRoom(res);\r\n    });\r\n    const fun1 = Section(\"class/api/section\");\r\n    fun1.then((res) => {\r\n      setSection(res);\r\n    });\r\n  }, []);\r\n  const datas = async () => {\r\n    // console.log(\",,,\", ref.current.values);\r\n    // return\r\n    const data = await customAxios.getCalls(\"exams/api/select\", {\r\n      params: {\r\n        ...ref.current.values,\r\n      },\r\n    });\r\n    setsubject(data);\r\n  };\r\n  const handleChanges = (e) => {\r\n    // console.log(\"handle\", ref.current.values,first);\r\n\r\n    setfirst(e.target.value);\r\n\r\n    // setsubject(subject);\r\n  };\r\n  useEffect(async () => {\r\n    if (first == \"\") {\r\n      return;\r\n    } else {\r\n      datas();\r\n    }\r\n  }, [first]);\r\n  return (\r\n    <>\r\n      <Formik\r\n        initialValues={{\r\n          examsGroup: \"\",\r\n          examsName: \"\",\r\n          classid: \"\",\r\n          sectionid: \"\",\r\n          Subject: \"\",\r\n        }}\r\n        validationSchema={Yup.object().shape({})}\r\n        innerRef={ref}\r\n        onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n          alert(JSON.stringify(values), null);\r\n          setmarksFeild(values);\r\n          allStudentAttendence(values);\r\n          // It is important to have it on server to be able to reuse it if user\r\n          // decides to continue later.\r\n          //   if (onNext) {\r\n          //     allStudentAttendence(data);\r\n          //     onNext();\r\n          //   }\r\n          //   setStatus({ success: true });\r\n          //   setSubmitting(false);\r\n          // } catch (err) {\r\n          //   console.error(err);\r\n          //   setStatus({ success: false });\r\n          //   setErrors({ submit: err.message });\r\n          //   setSubmitting(false);\r\n          // }\r\n        }}\r\n      >\r\n        {({\r\n          errors,\r\n          handleBlur,\r\n          handleChange,\r\n          handleSubmit,\r\n          isSubmitting,\r\n          setFieldValue,\r\n          setFieldTouched,\r\n          touched,\r\n          values,\r\n        }) => (\r\n          <form onSubmit={handleSubmit}>\r\n            {/* <Card sx={{ p: 3 }}> */}\r\n            <Box sx={{ mt: 2 }}>\r\n              <FormControl className={classes.feilds}>\r\n                <InputLabel id=\"examsGroup\">Exams Group</InputLabel>\r\n\r\n                <Select\r\n                  fullWidth\r\n                  labelId=\"examsGroup\"\r\n                  value={values.examsGroup}\r\n                  onChange={handleChange}\r\n                  id=\"examsGroup\"\r\n                  label=\"exams Group\"\r\n                  name=\"examsGroup\"\r\n                >\r\n                  {examgroup.map((option) => (\r\n                    <MenuItem key={option.id} value={option.id}>\r\n                      {option.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n\r\n              <FormControl className={classes.feilds}>\r\n                <InputLabel id=\"examsName\">Exams Name</InputLabel>\r\n\r\n                <Select\r\n                  fullWidth\r\n                  labelId=\"examsName\"\r\n                  value={values.examsName}\r\n                  onChange={handleChange}\r\n                  id=\"examsName\"\r\n                  label=\"exams Name\"\r\n                  name=\"examsName\"\r\n                >\r\n                  {examsName.map((option) => (\r\n                    <MenuItem key={option.id} value={option.id}>\r\n                      {option.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n              <FormControl className={classes.feild}>\r\n                <InputLabel id=\"classid\">Department/Class</InputLabel>\r\n\r\n                <Select\r\n                  fullWidth\r\n                  labelId=\"classid\"\r\n                  value={values.classid}\r\n                  onChange={handleChange}\r\n                  id=\"classid\"\r\n                  label=\"Department/Class\"\r\n                  name=\"classid\"\r\n                >\r\n                  {classRoom.map((option) => (\r\n                    <MenuItem key={option.id} value={option.id}>\r\n                      {option.className}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n              <FormControl className={classes.feild}>\r\n                <InputLabel id=\"sectionid\">Section</InputLabel>\r\n\r\n                <Select\r\n                  fullWidth\r\n                  labelId=\"sectionid\"\r\n                  value={first}\r\n                  onChange={(e) => {\r\n                    handleChange(e);\r\n                    handleChanges(e);\r\n                  }}\r\n                  id=\"sectionid\"\r\n                  label=\"Section\"\r\n                  name=\"sectionid\"\r\n                >\r\n                  {section.map((option) => (\r\n                    <MenuItem key={option.id} value={option.id}>\r\n                      {option.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n              <FormControl className={classes.feild}>\r\n                <InputLabel id=\"Subject\">Subject</InputLabel>\r\n\r\n                <Select\r\n                  fullWidth\r\n                  labelId=\"Subject\"\r\n                  value={values.Subject}\r\n                  onChange={handleChange}\r\n                  id=\"Subject\"\r\n                  label=\"Subject\"\r\n                  name=\"Subject\"\r\n                >\r\n                  {subject.map((option) => (\r\n                    <MenuItem key={option.id} value={option.id}>\r\n                      {option.subjectName}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n              <Button\r\n                sx={{ mt: 1, mr: 2, ml: 2 }}\r\n                color=\"primary\"\r\n                disabled={isSubmitting}\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n              >\r\n                Search\r\n              </Button>\r\n            </Box>\r\n            {/* </Card> */}\r\n          </form>\r\n        )}\r\n      </Formik>\r\n      <ExamsmarksList\r\n        studentsMarks={studentsMarks}\r\n        onSave={onSave}\r\n        setStudent={setStudent}\r\n        // hamdleChanges={hamdleChanges}\r\n        // Omarks={Omarks}\r\n        student={student}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default ExamsmarkInput1;\r\n","// import React from 'react'\r\n\r\n// const StudentToExams = () => {\r\n//   return (\r\n//     <div>StudentToExams</div>\r\n//   )\r\n// }\r\n\r\n// export default StudentToExams\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Breadcrumbs,\r\n  Button,\r\n  Container,\r\n  Grid,\r\n  Box,\r\n  Typography,\r\n  Link,\r\n} from \"@material-ui/core\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\nimport ChevronRightIcon from \"../../icons/ChevronRight\";\r\nimport UploadIcon from \"../../icons/Upload\";\r\nimport DownloadIcon from \"../../icons/Download\";\r\nimport useSettings from \"../../hooks/useSettings\";\r\nimport axios from \"axios\";\r\nimport ExamsRemarkInput1 from \"./ExamsmarkInput1\";\r\nimport toast from \"react-hot-toast\";\r\nimport wait from \"../../utils/wait\";\r\nimport {customAxios} from \"../apis/Axios\";\r\n\r\nconst Examsmark = () => {\r\n  const { settings } = useSettings();\r\n  const [student, setStudent] = useState([]);\r\n  const [students, setStudentsMarks] = useState([]);\r\n  const [marksFeild, setmarksFeild] = useState({});\r\n  // console.log( {students,s: omarks} );\r\n\r\n  const onSave = async () => {\r\n    const marksFeildCopy = { ...marksFeild };\r\n    const studentMarksCopy = [...students];\r\n\r\n    const combine = {\r\n      ...marksFeildCopy,\r\n      studentMarks: [...studentMarksCopy],\r\n    };\r\n    // console.log(combine);\r\n    // return\r\n    try {\r\n      await customAxios\r\n        .postCall(\"exams/Exams-marks\", {\r\n          ...combine,\r\n        })\r\n        .then((res) => {\r\n          if (res.status == 200) {\r\n            toast.success(res.message);\r\n          }\r\n        });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n\r\n  };\r\n\r\n  const allStudentAttendence = async (data) => {\r\n    const studentData = await customAxios.getCalls(\r\n      \"exams/api/exams\",\r\n      {\r\n        params: {\r\n          ...data,\r\n        },\r\n      }\r\n    );\r\n    setStudent(studentData);\r\n    console.log(studentData);\r\n  };\r\n  const studentData = (student, Omarks) => {\r\n    console.log(\"student\", student, \"Omarks\", Omarks);\r\n    const selectedStudentCopy = [...students];\r\n    let obj = {\r\n      // id:student.id,\r\n      Student_id: student.student_id,\r\n      rollno: student.rollno,\r\n      minMarks: student.minMarks,\r\n      maxMarks: student.maxMarks,\r\n      Obtmarks: Omarks,\r\n    };\r\n\r\n    const findIndex = selectedStudentCopy.findIndex((res) => {\r\n      // console.log(\"res\", res);\r\n\r\n      return res.rollno == student.rollno;\r\n    });\r\n    console.log(findIndex);\r\n    if (findIndex >= 0) {\r\n      selectedStudentCopy[findIndex] = obj;\r\n    } else {\r\n      selectedStudentCopy.push({ ...obj });\r\n    }\r\n    setStudentsMarks([...selectedStudentCopy]);\r\n    // console.log(\"aaaaaaaaaaaa\", selectedStudentCopy);\r\n\r\n    // console.log(students)\r\n  };\r\n\r\n  useEffect(() => {\r\n    allStudentAttendence();\r\n  }, []);\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Dashboard: Examination </title>\r\n      </Helmet>\r\n      <Box\r\n        sx={{\r\n          backgroundColor: \"background.default\",\r\n          minHeight: \"100%\",\r\n          py: 1,\r\n        }}\r\n      >\r\n        <Container maxWidth={settings.compact ? \"xl\" : false}>\r\n          <Grid container justifyContent=\"space-between\" spacing={3}>\r\n            <Grid item>\r\n              <Typography color=\"textPrimary\" variant=\"h5\">\r\n                Assign Exams\r\n              </Typography>\r\n              <Breadcrumbs\r\n                aria-label=\"breadcrumb\"\r\n                separator={<ChevronRightIcon fontSize=\"small\" />}\r\n                sx={{ mt: 1 }}\r\n              >\r\n                <Link\r\n                  color=\"textPrimary\"\r\n                  component={RouterLink}\r\n                  to=\"/dashboard\"\r\n                  variant=\"subtitle2\"\r\n                >\r\n                  Dashboard\r\n                </Link>\r\n                <Link\r\n                  color=\"textPrimary\"\r\n                  component={RouterLink}\r\n                  to=\"/dashboard/examsGroup\"\r\n                  variant=\"subtitle2\"\r\n                >\r\n                  Exam Group List\r\n                </Link>\r\n\r\n                <Link\r\n                  color=\"textPrimary\"\r\n                  component={RouterLink}\r\n                  to=\"/dashboard/examsList\"\r\n                  variant=\"subtitle2\"\r\n                >\r\n                  Exam List\r\n                </Link>\r\n                <Typography color=\"textSecondary\">Assign Student</Typography>\r\n                <Link\r\n                  color=\"textPrimary\"\r\n                  component={RouterLink}\r\n                  to=\"/dashboard\"\r\n                  variant=\"subtitle2\"\r\n                >\r\n                  Exams Subjects\r\n                </Link>\r\n              </Breadcrumbs>\r\n              <Box\r\n                sx={{\r\n                  mb: -1,\r\n                  mx: -1,\r\n                  mt: 1,\r\n                }}\r\n              >\r\n                <Button\r\n                  color=\"primary\"\r\n                  startIcon={<UploadIcon fontSize=\"small\" />}\r\n                  sx={{ m: 1 }}\r\n                  variant=\"text\"\r\n                >\r\n                  Import\r\n                </Button>\r\n                <Button\r\n                  color=\"primary\"\r\n                  startIcon={<DownloadIcon fontSize=\"small\" />}\r\n                  sx={{ m: 1 }}\r\n                  variant=\"text\"\r\n                >\r\n                  Export\r\n                </Button>\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n        <ExamsRemarkInput1\r\n          student={student}\r\n          setStudent={setStudent}\r\n          setmarksFeild={setmarksFeild}\r\n          onSave={onSave}\r\n          studentsMarks={studentData}\r\n          allStudentAttendence={allStudentAttendence}\r\n        />\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Examsmark;\r\n","import createSvgIcon from '@material-ui/core/utils/createSvgIcon';\n\nconst Download = createSvgIcon(\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 20 20\"\n    fill=\"currentColor\"\n  >\n    <path\n      fillRule=\"evenodd\"\n      d=\"M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z\"\n      clipRule=\"evenodd\"\n    />\n  </svg>, 'Download'\n);\n\nexport default Download;\n","import createSvgIcon from '@material-ui/core/utils/createSvgIcon';\n\nconst Upload = createSvgIcon(\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 20 20\"\n    fill=\"currentColor\"\n  >\n    <path\n      fillRule=\"evenodd\"\n      d=\"M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM6.293 6.707a1 1 0 010-1.414l3-3a1 1 0 011.414 0l3 3a1 1 0 01-1.414 1.414L11 5.414V13a1 1 0 11-2 0V5.414L7.707 6.707a1 1 0 01-1.414 0z\"\n      clipRule=\"evenodd\"\n    />\n  </svg>, 'Upload'\n);\n\nexport default Upload;\n","import axios from \"axios\";\r\nimport wait from \"../../utils/wait\";\r\n//attach authorization token and other common stuffs\r\n\r\nlet token = JSON.parse(localStorage.getItem(\"accessToken\")) ;\r\n// let token = localStorage.getItem(\"accessToken\")\r\n//   ? JSON.parse(localStorage.getItem(\"accessToken\"))\r\n//   : null;\r\n\r\n  // console.log(token)\r\nexport default (navigate = null) => {\r\n  const customAxios = axios.create({\r\n    baseURL: \"http://localhost:8000/\",\r\n    headers: {\r\n      authorization: `bearer ${token}`,\r\n    },\r\n  });\r\n\r\nfunction getTokenFromLocalStorage() {\r\n  const token = localStorage.getItem(\"accessToken\");\r\n  console.log(\"the token from local storage is -> \" + token);\r\n  if (token === null) {\r\n    return undefined;\r\n  }\r\n  return token;\r\n}\r\n\r\n\r\n  customAxios.interceptors.response.use(\r\n    (response) =>\r\n      new Promise((resolve, reject) => {\r\n        resolve(response);\r\n      }),\r\n    (error) => {\r\n     if (!error.response) { \r\n       return new Promise((resolve, reject) => {\r\n         reject(error);\r\n       });\r\n     }\r\n      if (error.response.status == 401) {\r\n        console.log(\"your are not logedin\");\r\n        // localStorage.removeItem(\"accessToken\");\r\n        // localStorage.removeItem(\"user\");\r\n        // if(navigate){\r\n        //   navigate(\"/authentication/login-unguarded\");\r\n        // }else{\r\n        //   window.location.href = \"/authentication/login-unguarded\";\r\n        // }\r\n      }\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n  return customAxios\r\n};\r\n\r\n","import axios from \"axios\";\r\nimport {customAxios} from \"./apis/Axios\";\r\nimport userService from \"./apis/userService\";\r\n\r\nexport const Section = async (endpoint) => {\r\n  const responce = await customAxios.getCall(`${endpoint}`);\r\n  const section = await responce;\r\n  return section;\r\n};\r\n\r\n// export const getAPI = async (endpoint, params={}) => {\r\n//   const responce = await axios.get(`${URL}${endpoint}`, {params:{...params}});\r\n//   // console.log(b.data)\r\n//   const section = await responce.data;\r\n//   return section;\r\n// };\r\n\r\n// export const postAPI = async (endpoint, data= {}) => {\r\n//   const responce = await axios.post(`${URL}${endpoint}`, {...data});\r\n//   // console.log(b.data)\r\n//   const section = await responce.data;\r\n//   return section;\r\n// };\r\n"],"sourceRoot":""}