{"version":3,"sources":["mangement/Exams/ExamsmarksList.js","mangement/Exams/ExamsMarks_Updatelist.js","mangement/Exams/ExamsMarks_UpdateForm1.js","mangement/Exams/ExamsMarks_Update.js","icons/Download.js","icons/Upload.js","mangement/apis/Api.js","mangement/HelperFunction.js"],"names":["useStyles","makeStyles","table","minWidth","StudentToExamsList","props","student","onSave","Omarks","studentsMarks","setStudent","other","classes","useState","ObtMarks","omarks","setMarks","setError","useEffect","console","log","initialValues","submit","validationSchema","Yup","shape","onSubmit","values","a","setErrors","setStatus","setSubmitting","err","error","message","errors","handleBlur","handleChange","handleSubmit","isSubmitting","setFieldValue","setFieldTouched","touched","length","sx","p","mt","className","aria-label","colSpan","map","row","index","component","rollno","name","gender","fname","onChange","e","data","target","value","hamdleChange","type","placeholder","id","style","display","justifyContent","marginTop","flexGrow","color","disabled","variant","studentData","Card","Divider","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","lname","TextField","event","tempValues","handleChanges","Box","Button","hedds","width","margin","border","borderRadius","feild","marginLeft","feilds","marginBottom","ExamsMarks_UpdateForm1","setField","MarksRecode","ref","useRef","first","setfirst","examgroup","setExamgroup","examsName","setExamsName","classRoom","setClassRoom","section","setSection","subject","setsubject","customAxios","getCall","examsGroupData","examsNameData","Section","then","res","datas","getCalls","params","current","examsGroup","classid","sectionid","Subject","innerRef","alert","JSON","stringify","FormControl","InputLabel","Select","fullWidth","labelId","label","option","MenuItem","subjectName","mr","ml","ExamsMarks_Updatelist","ExamsMarks_Update","settings","useSettings","students","studentmarks","setStudentMarks","Feild","feildCopy","StudentCopy","combine","studentMarks","postCall","status","toast","success","backgroundColor","minHeight","py","Container","maxWidth","compact","Grid","container","spacing","item","Typography","Breadcrumbs","separator","ChevronRight","fontSize","Link","RouterLink","to","mb","mx","startIcon","Upload","m","Download","selectedStudentCopy","obj","Student_id","student_id","minMarks","maxMarks","MaxMarks","Obtmarks","findIndex","push","createSvgIcon","xmlns","viewBox","fill","fillRule","d","clipRule","token","parse","localStorage","getItem","axios","create","baseURL","headers","authorization","interceptors","response","use","Promise","resolve","reject","endpoint","responce"],"mappings":"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","file":"static/js/74.46b2fee2.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as Yup from \"yup\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  FormHelperText,\r\n  TextField,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Divider,\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormLabel,\r\n  Radio,\r\n  RadioGroup,\r\n} from \"@material-ui/core\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport { Field, Formik } from \"formik\";\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n});\r\n\r\nconst StudentToExamsList = (props) => {\r\n  const { student, Omarks, onSave, studentsMarks,setStudent, ...other } =\r\n    props;\r\n  const classes = useStyles();\r\n  const [omarks, setMarks] = useState({\r\n    ObtMarks:\"\"\r\n  });\r\n\r\n  const hamdleChange = (e,index) => {\r\n    let data=[...student]\r\n    setMarks(data[index][e.target.name] = e.target.value);\r\n    setStudent(data)\r\n    //  setMarks({\r\n    //    ...omarks,\r\n    //    [e.target.name]: e.target.value,\r\n    //  });\r\n    console.log(e.target.value);\r\n  };\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(()=>{\r\n    console.log(omarks)\r\n  },[omarks])\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        ObtMarks: omarks,\r\n        submit: null,\r\n      }}\r\n      validationSchema={Yup.object().shape({})}\r\n      onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n        try {\r\n          // alert(JSON.stringify(values));\r\n          // alert(\"Save Here\");\r\n          if (onSave) {\r\n            onSave();\r\n          }\r\n        } catch (err) {\r\n          console.error(err);\r\n          setError(err.message);\r\n        }\r\n      }}\r\n    >\r\n      {({\r\n        errors,\r\n        handleBlur,\r\n        handleChange,\r\n        handleSubmit,\r\n        isSubmitting,\r\n        setFieldValue,\r\n        setFieldTouched,\r\n        touched,\r\n        values,\r\n      }) => (\r\n        <form onSubmit={handleSubmit} {...other}>\r\n          {student.length > 0 && (\r\n            <Card sx={{ p: 3, mt: 2 }}>\r\n              {/* <AttendenceTable student={student} /> */}\r\n\r\n              <Divider />\r\n              <TableContainer>\r\n                <Table className={classes.table} aria-label=\"simple table\">\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>Roll No</TableCell>\r\n                      <TableCell colSpan={1}>Student Name</TableCell>\r\n                      <TableCell colSpan={1}>Gender</TableCell>\r\n                      <TableCell colSpan={1}>Father Name</TableCell>\r\n                      {/* <TableCell colSpan={1}>Absent</TableCell> */}\r\n                      <TableCell>Marks Obtain </TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {\r\n                      student.length > 0\r\n                        ? student.map((row, index) => (\r\n                            <TableRow key={row.id}>\r\n                              {/* {console.log(row)} */}\r\n                              <TableCell component=\"th\">{row.rollno}</TableCell>\r\n                              <TableCell\r\n                              // id=\"\"\r\n                              //  value={values.id}\r\n                              >\r\n                                {`${row.name}`}\r\n                              </TableCell>\r\n                              <TableCell>{row.gender}</TableCell>\r\n\r\n                              <TableCell>{row.fname}</TableCell>\r\n\r\n                              <TableCell>\r\n                                <TextField\r\n                                  onChange={(e) => {\r\n                                    hamdleChange(e, index);\r\n                                    studentsMarks(row, e.target.value);\r\n                                  }}\r\n                                  value={ omarks.ObtMarks}\r\n                                  // id={row.id}\r\n                                  name=\"ObtMarks\"\r\n                                  type=\"number\"\r\n                                  placeholder=\"Enter Marks\"\r\n                                />\r\n                              </TableCell>\r\n                            </TableRow>\r\n                          ))\r\n                        : null\r\n                      // <TableRow\r\n                      //   style={{\r\n                      //     display: \"flex\",\r\n                      //     justifyContent: \"center\",\r\n                      //     alignItems: \"center\",\r\n                      //   }}\r\n                      // >\r\n                      //   Data Not Found{\" \"}\r\n                      // </TableRow>\r\n                    }\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n\r\n              <Box\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"flex-end\",\r\n                  marginTop: 10,\r\n                }}\r\n              >\r\n                <Box sx={{ flexGrow: 1 }} />\r\n                <Button\r\n                  color=\"primary\"\r\n                  disabled={isSubmitting}\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                >\r\n                  Save\r\n                </Button>\r\n              </Box>\r\n            </Card>\r\n          )}\r\n        </form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\n// StudentToExamsList.propTypes = {\r\n//   onBack: PropTypes.func,\r\n//   onComplete: PropTypes.func,\r\n// };\r\n\r\nexport default StudentToExamsList;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as Yup from \"yup\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  FormHelperText,\r\n  TextField,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Divider,\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormLabel,\r\n  Radio,\r\n  RadioGroup,\r\n} from \"@material-ui/core\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport { Field, Formik } from \"formik\";\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n});\r\n\r\nconst StudentToExamsList = (props) => {\r\n  const { student, studentData,setStudent, onSave, ...other } = props;\r\n  const classes = useStyles();\r\n//   const [value, setValue] = useState(\"\");\r\n  const handleChanges = (event, index) => {\r\n   let tempValues = [...student];\r\n   tempValues[index][event.target.name] = event.target.value;\r\n   console.log(tempValues);\r\n   setStudent(tempValues);\r\n  };\r\n  const [error, setError] = useState(null);\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        ObtMarks: \"\",\r\n        submit: null,\r\n      }}\r\n      validationSchema={Yup.object().shape({})}\r\n      onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n        try {\r\n          // alert(JSON.stringify(values));\r\n          // alert(\"Save Here\");\r\n          if (onSave) {\r\n            onSave();\r\n          }\r\n        } catch (err) {\r\n          console.error(err);\r\n          setError(err.message);\r\n        }\r\n      }}\r\n    >\r\n      {({\r\n        errors,\r\n        handleBlur,\r\n        handleChange,\r\n        handleSubmit,\r\n        isSubmitting,\r\n        setFieldValue,\r\n        setFieldTouched,\r\n        touched,\r\n        values,\r\n      }) => (\r\n        <form onSubmit={handleSubmit} {...other}>\r\n          {student.length > 0 && (\r\n            <Card sx={{ p: 3, mt: 2 }}>\r\n              {/* <AttendenceTable student={student} /> */}\r\n\r\n              <Divider />\r\n              <TableContainer>\r\n                <Table className={classes.table} aria-label=\"simple table\">\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>Roll No</TableCell>\r\n                      <TableCell colSpan={1}>Student Name</TableCell>\r\n                      <TableCell colSpan={1}>Gender</TableCell>\r\n                      <TableCell colSpan={1}>Father Name</TableCell>\r\n                      {/* <TableCell colSpan={1}>Absent</TableCell> */}\r\n                      <TableCell>Marks Obtain </TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {\r\n                      student.length > 0\r\n                        ? student.map((row, index) => (\r\n                            <TableRow key={row.id}>\r\n                              {/* {console.log(row)} */}\r\n                              <TableCell component=\"th\">{row.rollno}</TableCell>\r\n                              <TableCell\r\n                              // id=\"\"\r\n                              //  value={values.id}\r\n                              >\r\n                                {`${row.name} ${row.lname}`}\r\n                              </TableCell>\r\n                              <TableCell>{row.gender}</TableCell>\r\n\r\n                              <TableCell>{row.fname}</TableCell>\r\n\r\n                              <TableCell key={row.id}>\r\n                                <TextField\r\n                                  onChange={(e) => {\r\n                                    handleChanges(e, index);\r\n                                    studentData(row, e.target.value);\r\n                                  }}\r\n                                  value={row.ObtMarks }\r\n                                  // id={row.id}\r\n                                  name=\"ObtMarks\"\r\n                                  type=\"number\"\r\n                                  placeholder=\"Enter Marks\"\r\n                                />\r\n                              </TableCell>\r\n                            </TableRow>\r\n                          ))\r\n                        : null\r\n                      // <TableRow\r\n                      //   style={{\r\n                      //     display: \"flex\",\r\n                      //     justifyContent: \"center\",\r\n                      //     alignItems: \"center\",\r\n                      //   }}\r\n                      // >\r\n                      //   Data Not Found{\" \"}\r\n                      // </TableRow>\r\n                    }\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n\r\n              <Box\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"flex-end\",\r\n                  marginTop: 10,\r\n                }}\r\n              >\r\n                <Box sx={{ flexGrow: 1 }} />\r\n                <Button\r\n                  color=\"primary\"\r\n                  disabled={isSubmitting}\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                >\r\n                  Save\r\n                </Button>\r\n              </Box>\r\n            </Card>\r\n          )}\r\n        </form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\n// StudentToExamsList.propTypes = {\r\n//   onBack: PropTypes.func,\r\n//   onComplete: PropTypes.func,\r\n// };\r\n\r\nexport default StudentToExamsList;\r\n","import React from \"react\";\r\nimport * as Yup from \"yup\";\r\nimport {\r\n  Box,\r\n  Card,\r\n  TextField,\r\n  Typography,\r\n  MenuItem,\r\n  Button,\r\n  FormControl,\r\n  Select,\r\n  InputLabel,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Formik } from \"formik\";\r\nimport { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Section } from \"../HelperFunction\";\r\nimport ExamsmarksList from \"./ExamsmarksList\";\r\nimport { useRef } from \"react\";\r\nimport ExamsMarks_Updatelist from \"./ExamsMarks_Updatelist\";\r\nimport {customAxios} from \"../apis/Axios\";\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 700,\r\n    // marginTop:10\r\n  },\r\n  hedds: {\r\n    width: \"20%\",\r\n    // padding: \"12px 20px\",\r\n    margin: \"8px 10px\",\r\n    display: \"inline-block\",\r\n    border: \"1px solid #ccc\",\r\n    borderRadius: \"4px\",\r\n    // box-sizing:,\r\n  },\r\n  feild: {\r\n    width: \"20%\",\r\n    marginLeft: 8,\r\n  },\r\n  feilds: {\r\n    width: \"20%\",\r\n    marginLeft: 8,\r\n    // marginTop: 8,\r\n    marginBottom: 10,\r\n  },\r\n});\r\n\r\nconst ExamsMarks_UpdateForm1 = ({ onSave,studentData,setStudent,setField, student,MarksRecode }) => {\r\n  const classes = useStyles();\r\n  const ref = useRef(null);\r\n  const [first, setfirst] = useState([]);\r\n\r\n  const [examgroup, setExamgroup] = useState([]);\r\n  const [examsName, setExamsName] = useState([]);\r\n  const [classRoom, setClassRoom] = useState([]);\r\n  const [section, setSection] = useState([]);\r\n  const [subject, setsubject] = useState([]);\r\n  useEffect(async () => {\r\n    const examsGroupData = await customAxios.getCall(\"exams/examsgroup\");\r\n    setExamgroup(examsGroupData);\r\n\r\n    const examsNameData = await customAxios.getCall(\r\n      \"exams/examsName\"\r\n    );\r\n    setExamsName(examsNameData);\r\n    const fun = Section(\"class/api\");\r\n    fun.then((res) => {\r\n      setClassRoom(res);\r\n    });\r\n    const fun1 = Section(\"class/api/section\");\r\n    fun1.then((res) => {\r\n      setSection(res);\r\n    });\r\n  }, []);\r\n  const datas = async () => {\r\n    const data = await customAxios.getCalls(\"exams/api/select\", {\r\n      params: {\r\n        ...ref.current.values,\r\n      },\r\n    });\r\n    console.log(data);\r\n    setsubject(data);\r\n  };\r\n  const handleChanges = (e) => {\r\n    setfirst(e.target.value);\r\n  };\r\n  useEffect(async () => {\r\n    if (first == \"\") {\r\n      return;\r\n    } else {\r\n      datas();\r\n    }\r\n  }, [first]);\r\n  return (\r\n    <>\r\n      <Formik\r\n        initialValues={{\r\n          examsGroup: \"\",\r\n          examsName: \"\",\r\n          classid: \"\",\r\n          sectionid: \"\",\r\n          Subject: \"\",\r\n        }}\r\n        validationSchema={Yup.object().shape({})}\r\n        innerRef={ref}\r\n        onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n          alert(JSON.stringify(values), null);\r\n          MarksRecode(values);\r\n          setField(values)\r\n          // setmarksFeild(values);\r\n          // It is important to have it on server to be able to reuse it if user\r\n          // decides to continue later.\r\n          //   if (onNext) {\r\n          //     allStudentAttendence(data);\r\n          //     onNext();\r\n          //   }\r\n          //   setStatus({ success: true });\r\n          //   setSubmitting(false);\r\n          // } catch (err) {\r\n          //   console.error(err);\r\n          //   setStatus({ success: false });\r\n          //   setErrors({ submit: err.message });\r\n          //   setSubmitting(false);\r\n          // }\r\n        }}\r\n      >\r\n        {({\r\n          errors,\r\n          handleBlur,\r\n          handleChange,\r\n          handleSubmit,\r\n          isSubmitting,\r\n          setFieldValue,\r\n          setFieldTouched,\r\n          touched,\r\n          values,\r\n        }) => (\r\n          <form onSubmit={handleSubmit}>\r\n            {/* <Card sx={{ p: 3 }}> */}\r\n            <Box sx={{ mt: 2 }}>\r\n              <FormControl className={classes.feilds}>\r\n                <InputLabel id=\"examsGroup\">Exams Group</InputLabel>\r\n\r\n                <Select\r\n                  fullWidth\r\n                  labelId=\"examsGroup\"\r\n                  value={values.examsGroup}\r\n                  onChange={handleChange}\r\n                  id=\"examsGroup\"\r\n                  label=\"exams Group\"\r\n                  name=\"examsGroup\"\r\n                >\r\n                  {examgroup.map((option) => (\r\n                    <MenuItem key={option.id} value={option.id}>\r\n                      {option.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n\r\n              <FormControl className={classes.feilds}>\r\n                <InputLabel id=\"examsName\">Exams Name</InputLabel>\r\n\r\n                <Select\r\n                  fullWidth\r\n                  labelId=\"examsName\"\r\n                  value={values.examsName}\r\n                  onChange={handleChange}\r\n                  id=\"examsName\"\r\n                  label=\"exams Name\"\r\n                  name=\"examsName\"\r\n                >\r\n                  {examsName.map((option) => (\r\n                    <MenuItem key={option.id} value={option.id}>\r\n                      {option.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n              <FormControl className={classes.feild}>\r\n                <InputLabel id=\"classid\">Department/Class</InputLabel>\r\n\r\n                <Select\r\n                  fullWidth\r\n                  labelId=\"classid\"\r\n                  value={values.classid}\r\n                  onChange={handleChange}\r\n                  id=\"classid\"\r\n                  label=\"Department/Class\"\r\n                  name=\"classid\"\r\n                >\r\n                  {classRoom.map((option) => (\r\n                    <MenuItem key={option.id} value={option.id}>\r\n                      {option.className}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n              <FormControl className={classes.feild}>\r\n                <InputLabel id=\"sectionid\">Section</InputLabel>\r\n\r\n                <Select\r\n                  fullWidth\r\n                  labelId=\"sectionid\"\r\n                  value={first}\r\n                  onChange={(e) => {\r\n                    handleChange(e);\r\n                    handleChanges(e);\r\n                  }}\r\n                  id=\"sectionid\"\r\n                  label=\"Section\"\r\n                  name=\"sectionid\"\r\n                >\r\n                  {section.map((option) => (\r\n                    <MenuItem key={option.id} value={option.id}>\r\n                      {option.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n              <FormControl className={classes.feild}>\r\n                <InputLabel id=\"Subject\">Subject</InputLabel>\r\n\r\n                <Select\r\n                  fullWidth\r\n                  labelId=\"Subject\"\r\n                  value={values.Subject}\r\n                  onChange={handleChange}\r\n                  id=\"Subject\"\r\n                  label=\"Subject\"\r\n                  name=\"Subject\"\r\n                >\r\n                  {subject.map((option) => (\r\n                    <MenuItem key={option.id} value={option.id}>\r\n                      {option.subjectName}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n              <Button\r\n                sx={{ mt: 1, mr: 2, ml: 2 }}\r\n                color=\"primary\"\r\n                disabled={isSubmitting}\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n              >\r\n                Search\r\n              </Button>\r\n            </Box>\r\n            {/* </Card> */}\r\n          </form>\r\n        )}\r\n      </Formik>\r\n      <ExamsMarks_Updatelist\r\n        studentData={studentData}\r\n        setStudent={setStudent}\r\n        student={student}\r\n        onSave={onSave}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default ExamsMarks_UpdateForm1;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Breadcrumbs,\r\n  Button,\r\n  Container,\r\n  Grid,\r\n  Box,\r\n  Typography,\r\n  Link,\r\n} from \"@material-ui/core\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\nimport ChevronRightIcon from \"../../icons/ChevronRight\";\r\nimport UploadIcon from \"../../icons/Upload\";\r\nimport DownloadIcon from \"../../icons/Download\";\r\nimport useSettings from \"../../hooks/useSettings\";\r\nimport axios from \"axios\";\r\nimport toast from \"react-hot-toast\";\r\nimport wait from \"../../utils/wait\";\r\nimport ExamsMarks_UpdateForm1 from \"./ExamsMarks_UpdateForm1\";\r\nimport {customAxios} from \"../apis/Axios\";\r\n\r\nconst ExamsMarks_Update = () => {\r\n  const { settings } = useSettings();\r\n  const [students, setStudent] = useState([]);\r\n  const [studentmarks, setStudentMarks] = useState([]);\r\n  const [Feild, setField] = useState({});\r\n  // console.log( {students,s: omarks} );\r\n  // console.log(\"sssss\",student)\r\n  const onSave = async () => {\r\n    const feildCopy = { ...Feild };\r\n    const StudentCopy = [...students];\r\n\r\n    const combine = {\r\n      ...feildCopy,\r\n      studentMarks: [...StudentCopy],\r\n    };\r\n    console.log(\"Save Data\", studentmarks);\r\n    try {\r\n      await customAxios\r\n        .postCall(\"exams/api/exams/marks-updated\", {\r\n          ...combine,\r\n        })\r\n        .then((res) => {\r\n          if (res.status == 200) {\r\n            toast.success(res.message);\r\n          }\r\n        });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const MarksRecode = async (values) => {\r\n    const studentData = await customAxios.getCalls(\r\n      \"exams/api/exams/marks-update\",\r\n      {\r\n        params: {\r\n          ...values,\r\n        },\r\n      }\r\n    );\r\n    setStudent(studentData);\r\n  };\r\n\r\n  const studentData = (student, Omarks) => {\r\n    // console.log(\"studentsss\", student, \"Omarks\", Omarks);\r\n    const selectedStudentCopy = [...students];\r\n    let obj = {\r\n      // id:student.id,\r\n      Student_id: student.student_id,\r\n      rollno: student.rollno,\r\n      minMarks: student.minMarks,\r\n      maxMarks: student.MaxMarks,\r\n      Obtmarks: Omarks,\r\n    };\r\n\r\n    const findIndex = selectedStudentCopy.findIndex((res) => {\r\n      // console.log(\"res\", res);\r\n\r\n      return res.rollno == student.rollno;\r\n    });\r\n    console.log(findIndex);\r\n    if (findIndex >= 0) {\r\n      selectedStudentCopy[findIndex] = obj;\r\n    } else {\r\n      selectedStudentCopy.push({ ...obj });\r\n    }\r\n    setStudentMarks([...selectedStudentCopy]);\r\n  };\r\n  useEffect(() => {}, []);\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Dashboard: Examination </title>\r\n      </Helmet>\r\n      <Box\r\n        sx={{\r\n          backgroundColor: \"background.default\",\r\n          minHeight: \"100%\",\r\n          py: 1,\r\n        }}\r\n      >\r\n        <Container maxWidth={settings.compact ? \"xl\" : false}>\r\n          <Grid container justifyContent=\"space-between\" spacing={3}>\r\n            <Grid item>\r\n              <Typography color=\"textPrimary\" variant=\"h5\">\r\n                Assign Exams\r\n              </Typography>\r\n              <Breadcrumbs\r\n                aria-label=\"breadcrumb\"\r\n                separator={<ChevronRightIcon fontSize=\"small\" />}\r\n                sx={{ mt: 1 }}\r\n              >\r\n                <Link\r\n                  color=\"textPrimary\"\r\n                  component={RouterLink}\r\n                  to=\"/dashboard\"\r\n                  variant=\"subtitle2\"\r\n                >\r\n                  Dashboard\r\n                </Link>\r\n                <Link\r\n                  color=\"textPrimary\"\r\n                  component={RouterLink}\r\n                  to=\"/dashboard/examsGroup\"\r\n                  variant=\"subtitle2\"\r\n                >\r\n                  Exam Group List\r\n                </Link>\r\n\r\n                <Link\r\n                  color=\"textPrimary\"\r\n                  component={RouterLink}\r\n                  to=\"/dashboard/examsList\"\r\n                  variant=\"subtitle2\"\r\n                >\r\n                  Exam List\r\n                </Link>\r\n                <Typography color=\"textSecondary\">Assign Student</Typography>\r\n                <Link\r\n                  color=\"textPrimary\"\r\n                  component={RouterLink}\r\n                  to=\"/dashboard\"\r\n                  variant=\"subtitle2\"\r\n                >\r\n                  Exams Subjects\r\n                </Link>\r\n              </Breadcrumbs>\r\n              <Box\r\n                sx={{\r\n                  mb: -1,\r\n                  mx: -1,\r\n                  mt: 1,\r\n                }}\r\n              >\r\n                <Button\r\n                  color=\"primary\"\r\n                  startIcon={<UploadIcon fontSize=\"small\" />}\r\n                  sx={{ m: 1 }}\r\n                  variant=\"text\"\r\n                >\r\n                  Import\r\n                </Button>\r\n                <Button\r\n                  color=\"primary\"\r\n                  startIcon={<DownloadIcon fontSize=\"small\" />}\r\n                  sx={{ m: 1 }}\r\n                  variant=\"text\"\r\n                >\r\n                  Export\r\n                </Button>\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n        <ExamsMarks_UpdateForm1\r\n          studentData={studentData}\r\n          setField={setField}\r\n          student={students}\r\n          setStudent={setStudent}\r\n          MarksRecode={MarksRecode}\r\n          onSave={onSave}\r\n        />\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ExamsMarks_Update;\r\n","import createSvgIcon from '@material-ui/core/utils/createSvgIcon';\n\nconst Download = createSvgIcon(\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 20 20\"\n    fill=\"currentColor\"\n  >\n    <path\n      fillRule=\"evenodd\"\n      d=\"M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z\"\n      clipRule=\"evenodd\"\n    />\n  </svg>, 'Download'\n);\n\nexport default Download;\n","import createSvgIcon from '@material-ui/core/utils/createSvgIcon';\n\nconst Upload = createSvgIcon(\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 20 20\"\n    fill=\"currentColor\"\n  >\n    <path\n      fillRule=\"evenodd\"\n      d=\"M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM6.293 6.707a1 1 0 010-1.414l3-3a1 1 0 011.414 0l3 3a1 1 0 01-1.414 1.414L11 5.414V13a1 1 0 11-2 0V5.414L7.707 6.707a1 1 0 01-1.414 0z\"\n      clipRule=\"evenodd\"\n    />\n  </svg>, 'Upload'\n);\n\nexport default Upload;\n","import axios from \"axios\";\r\nimport wait from \"../../utils/wait\";\r\n//attach authorization token and other common stuffs\r\n\r\nlet token = JSON.parse(localStorage.getItem(\"accessToken\")) ;\r\n// let token = localStorage.getItem(\"accessToken\")\r\n//   ? JSON.parse(localStorage.getItem(\"accessToken\"))\r\n//   : null;\r\n\r\n  // console.log(token)\r\nexport default (navigate = null) => {\r\n  const customAxios = axios.create({\r\n    baseURL: \"http://localhost:8000/\",\r\n    headers: {\r\n      authorization: `bearer ${token}`,\r\n    },\r\n  });\r\n\r\nfunction getTokenFromLocalStorage() {\r\n  const token = localStorage.getItem(\"accessToken\");\r\n  console.log(\"the token from local storage is -> \" + token);\r\n  if (token === null) {\r\n    return undefined;\r\n  }\r\n  return token;\r\n}\r\n\r\n\r\n  customAxios.interceptors.response.use(\r\n    (response) =>\r\n      new Promise((resolve, reject) => {\r\n        resolve(response);\r\n      }),\r\n    (error) => {\r\n     if (!error.response) { \r\n       return new Promise((resolve, reject) => {\r\n         reject(error);\r\n       });\r\n     }\r\n      if (error.response.status == 401) {\r\n        console.log(\"your are not logedin\");\r\n        // localStorage.removeItem(\"accessToken\");\r\n        // localStorage.removeItem(\"user\");\r\n        // if(navigate){\r\n        //   navigate(\"/authentication/login-unguarded\");\r\n        // }else{\r\n        //   window.location.href = \"/authentication/login-unguarded\";\r\n        // }\r\n      }\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n  return customAxios\r\n};\r\n\r\n","import axios from \"axios\";\r\nimport {customAxios} from \"./apis/Axios\";\r\nimport userService from \"./apis/userService\";\r\n\r\nexport const Section = async (endpoint) => {\r\n  const responce = await customAxios.getCall(`${endpoint}`);\r\n  const section = await responce;\r\n  return section;\r\n};\r\n\r\n// export const getAPI = async (endpoint, params={}) => {\r\n//   const responce = await axios.get(`${URL}${endpoint}`, {params:{...params}});\r\n//   // console.log(b.data)\r\n//   const section = await responce.data;\r\n//   return section;\r\n// };\r\n\r\n// export const postAPI = async (endpoint, data= {}) => {\r\n//   const responce = await axios.post(`${URL}${endpoint}`, {...data});\r\n//   // console.log(b.data)\r\n//   const section = await responce.data;\r\n//   return section;\r\n// };\r\n"],"sourceRoot":""}