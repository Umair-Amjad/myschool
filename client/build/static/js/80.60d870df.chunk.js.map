{"version":3,"sources":["mangement/Exams/StudentToExamsList.js","mangement/Exams/StudentToExamsInput.js","mangement/Exams/StudentToExams.js","icons/Download.js","icons/Upload.js","mangement/apis/Api.js","mangement/HelperFunction.js"],"names":["useStyles","makeStyles","table","minWidth","StudentToExamsList","props","classes","student","studentRecord","onSave","setSelectedStudents","other","useState","initialValues","submit","validationSchema","Yup","shape","onSubmit","values","a","setErrors","setStatus","setSubmitting","success","err","console","error","message","errors","handleBlur","handleChange","handleSubmit","isSubmitting","setFieldValue","setFieldTouched","touched","Card","sx","p","Divider","TableContainer","Table","className","aria-label","TableHead","TableRow","TableCell","Checkbox","role","hover","onChange","inputProps","colSpan","TableBody","length","map","row","value","component","rollno","name","class","section","fname","gender","id","Box","style","display","justifyContent","marginTop","flexGrow","Button","color","disabled","type","variant","hedds","width","margin","border","borderRadius","feild","marginLeft","feilds","marginBottom","StudentToExamsInput","allStudentAttendence","setexamFeild","examgroup","setExamgroup","examsName","setExamsName","classRoom","setClassRoom","setSection","log","useEffect","customAxios","getCall","examsGroupData","examsNameData","Section","then","res","examsGroup","classid","sectionid","mt","FormControl","InputLabel","Select","fullWidth","labelId","label","option","MenuItem","mr","ml","StudentToExams","settings","useSettings","setStudent","examFeild","selectedStudents","data","getCalls","params","studentData","studentCopylist","studentDatalist","combineForm","studentList","toast","loading","wait","dismiss","postCall","status","backgroundColor","minHeight","py","Container","maxWidth","compact","Grid","container","spacing","item","Typography","Breadcrumbs","separator","ChevronRight","fontSize","Link","RouterLink","to","mb","mx","startIcon","Upload","m","Download","selected","obj","addmission_id","addid","Student_id","student_name","father_name","findIndex","push","createSvgIcon","xmlns","viewBox","fill","fillRule","d","clipRule","token","JSON","parse","localStorage","getItem","axios","create","baseURL","headers","authorization","interceptors","response","use","Promise","resolve","reject","endpoint","responce"],"mappings":"mfA6BMA,EAAYC,YAAW,CAC3BC,MAAO,CACLC,SAAU,OAiKCC,EA7JY,SAACC,GAC1B,IAAMC,EAAUN,IACRO,EAA+DF,EAA/DE,QAAQC,EAAuDH,EAAvDG,cAAmCC,GAAoBJ,EAAzCK,oBAAyCL,EAApBI,QAAUE,EAA7D,YAAuEN,EAAvE,4DACA,EAA0BO,mBAAS,MAAnC,6BAGA,OACE,cAAC,IAAD,CACEC,cAAe,CACbC,OAAQ,MAEVC,iBAAkBC,MAAaC,MAAM,IACrCC,SAAQ,uCAAE,WAAOC,EAAP,sBAAAC,EAAA,sDAAiBC,EAAjB,EAAiBA,UAAWC,EAA5B,EAA4BA,UAAWC,EAAvC,EAAuCA,cAC/C,IAEMd,IACFA,IACCa,EAAU,CAAEE,SAAS,IACrBD,GAAc,IAEjB,MAAOE,GACPC,QAAQC,MAAMF,GACdH,EAAU,CAAEE,SAAS,IACrBH,EAAU,CAAEP,OAAQW,EAAIG,UACxBL,GAAc,GAZR,2CAAF,wDALV,SAqBG,cACCM,OADD,EAECC,WAFD,EAGCC,aAHD,IAICC,EAJD,EAICA,aACAC,EALD,EAKCA,aALD,EAMCC,cAND,EAOCC,gBAPD,EAQCC,QARD,EASCjB,OATD,OAWC,8CAAMD,SAAUc,GAAkBrB,GAAlC,aACE,eAAC0B,EAAA,EAAD,CAAMC,GAAI,CAAEC,EAAG,GAAf,UAGE,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAOC,UAAWrC,EAAQJ,MAAO0C,aAAW,eAA5C,UACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,WACG,IAED,cAACC,EAAA,EAAD,CACEC,KAAK,WAELC,MAAM,OAENC,SAAU,WACR3C,EAAcD,IAGhB6C,WAAY,CACV,kBAAmB,yBAKzB,cAACL,EAAA,EAAD,sBACA,cAACA,EAAA,EAAD,CAAWM,QAAS,EAApB,0BACA,cAACN,EAAA,EAAD,CAAWM,QAAS,EAApB,mBACA,cAACN,EAAA,EAAD,CAAWM,QAAS,EAApB,qBACA,cAACN,EAAA,EAAD,CAAWM,QAAS,EAApB,yBAEA,cAACN,EAAA,EAAD,0BAGJ,cAACO,EAAA,EAAD,UAEI/C,EAAQgD,OAAS,EACbhD,EAAQiD,KAAI,SAACC,GAAD,OACV,eAACX,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CACEC,KAAK,WAELC,MAAM,OACNQ,MAAOD,EACPN,SAAU,WACR3C,EAAciD,IAOhBL,WAAY,CACV,kBAAmB,wBAIzB,cAACL,EAAA,EAAD,CAAWY,UAAU,KAArB,SAA2BF,EAAIG,SAC/B,cAACb,EAAA,EAAD,oBAIMU,EAAII,QAEV,cAACd,EAAA,EAAD,UAAYU,EAAIK,QAEhB,cAACf,EAAA,EAAD,UAAYU,EAAIM,UAChB,cAAChB,EAAA,EAAD,UAAYU,EAAIO,QAEhB,cAACjB,EAAA,EAAD,UAAYU,EAAIQ,WAhCHR,EAAIS,OAmCrB,YAcZ,eAACC,EAAA,EAAD,CACEC,MAAO,CACLC,QAAS,OACTC,eAAgB,WAChBC,UAAW,IAJf,UAOE,cAACJ,EAAA,EAAD,CAAK7B,GAAI,CAAEkC,SAAU,KACrB,cAACC,EAAA,EAAD,CACEC,MAAM,UACNC,SAAU1C,EACV2C,KAAK,SACLC,QAAQ,YAJV,+B,SCxJR7E,EAAYC,YAAW,CAC3BC,MAAO,CACLC,SAAU,KAGZ2E,MAAO,CACLC,MAAO,MAEPC,OAAQ,WACRX,QAAS,eACTY,OAAQ,iBACRC,aAAc,OAGhBC,MAAO,CACLJ,MAAO,MACPK,WAAY,GAEdC,OAAQ,CACNN,MAAO,MACPK,WAAY,EAEZE,aAAc,MAwLHC,EApLa,SAAC,GAMtB,IALLC,EAKI,EALJA,qBACAC,EAII,EAJJA,aACAlF,EAGI,EAHJA,QACAE,EAEI,EAFJA,OACAD,EACI,EADJA,cAEMF,EAAUN,IAChB,EAAkCY,mBAAS,IAA3C,mBAAO8E,EAAP,KAAkBC,EAAlB,KACA,EAAkC/E,mBAAS,IAA3C,mBAAOgF,EAAP,KAAkBC,EAAlB,KAEA,EAAkCjF,mBAAS,IAA3C,mBAAOkF,EAAP,KAAkBC,EAAlB,KACA,EAA8BnF,mBAAS,IAAvC,mBAAOmD,EAAP,KAAgBiC,EAAhB,KAwBA,OAvBFtE,QAAQuE,IAAIL,GACVM,oBAAS,sBAAC,8BAAA9E,EAAA,sEACqB+E,IAAYC,QACvC,oBAFM,cACFC,EADE,OAKRV,EAAaU,GALL,SAOoBF,IAAYC,QACtC,mBARM,OAOFE,EAPE,OAURT,EAAaS,GAEDC,YAAQ,aAChBC,MAAK,SAACC,GACRV,EAAaU,MAEFF,YAAQ,qBAChBC,MAAK,SAACC,GACTT,EAAWS,MAlBL,4CAoBP,IAGD,qCACE,cAAC,IAAD,CACE5F,cAAe,CACb6F,WAAY,GACZd,UAAW,GACXe,QAAS,GACTC,UAAW,IAEb7F,iBAAkBC,MAAaC,MAAM,IACrCC,SAAQ,uCAAE,WAAOC,EAAP,YAAAC,EAAA,wDAAiBC,UAAjB,EAA4BC,UAA5B,EAAuCC,cAE/CkE,EAAatE,GACbqE,EAAqBrE,GAHb,2CAAF,wDARV,SA4BG,cACCU,OADD,EAECC,WAFD,IAGCC,EAHD,EAGCA,aACAC,EAJD,EAICA,aACAC,EALD,EAKCA,aAIAd,GATD,EAMCe,cAND,EAOCC,gBAPD,EAQCC,QARD,EASCjB,QATD,OAWC,sBAAMD,SAAUc,EAAhB,SAEE,eAACmC,EAAA,EAAD,CAAK7B,GAAI,CAAEuE,GAAI,GAAf,UACE,eAACC,EAAA,EAAD,CAAanE,UAAWrC,EAAQ+E,OAAhC,UACE,cAAC0B,EAAA,EAAD,CAAY7C,GAAG,aAAf,yBAEA,cAAC8C,EAAA,EAAD,CACEC,WAAS,EACTC,QAAQ,aACRxD,MAAOvC,EAAOuF,WACdvD,SAAUpB,EACVmC,GAAG,aACHiD,MAAM,cACNtD,KAAK,aAPP,SASG6B,EAAUlC,KAAI,SAAC4D,GAAD,OACb,cAACC,EAAA,EAAD,CAA0B3D,MAAO0D,EAAOlD,GAAxC,SACGkD,EAAOvD,MADKuD,EAAOlD,YAO5B,eAAC4C,EAAA,EAAD,CAAanE,UAAWrC,EAAQ+E,OAAhC,UACE,cAAC0B,EAAA,EAAD,CAAY7C,GAAG,YAAf,wBAEA,cAAC8C,EAAA,EAAD,CACEC,WAAS,EACTC,QAAQ,YACRxD,MAAOvC,EAAOyE,UACdzC,SAAUpB,EACVmC,GAAG,YACHiD,MAAM,aACNtD,KAAK,YAPP,SASG+B,EAAUpC,KAAI,SAAC4D,GAAD,OACb,cAACC,EAAA,EAAD,CAA0B3D,MAAO0D,EAAOlD,GAAxC,SACGkD,EAAOvD,MADKuD,EAAOlD,YAM5B,eAAC4C,EAAA,EAAD,CAAanE,UAAWrC,EAAQ6E,MAAhC,UACE,cAAC4B,EAAA,EAAD,CAAY7C,GAAG,UAAf,8BAEA,cAAC8C,EAAA,EAAD,CACEC,WAAS,EACTC,QAAQ,UACRxD,MAAOvC,EAAOwF,QACdxD,SAAUpB,EACVmC,GAAG,UACHiD,MAAM,mBACNtD,KAAK,UAPP,SASGiC,EAAUtC,KAAI,SAAC4D,GAAD,OACb,cAACC,EAAA,EAAD,CAA0B3D,MAAO0D,EAAOlD,GAAxC,SACGkD,EAAOzE,WADKyE,EAAOlD,YAM5B,eAAC4C,EAAA,EAAD,CAAanE,UAAWrC,EAAQ6E,MAAhC,UACE,cAAC4B,EAAA,EAAD,CAAY7C,GAAG,YAAf,qBAEA,cAAC8C,EAAA,EAAD,CACEC,WAAS,EACTC,QAAQ,YACRxD,MAAOvC,EAAOyF,UACdzD,SAAUpB,EACVmC,GAAG,YACHiD,MAAM,UACNtD,KAAK,YAPP,SASGE,EAAQP,KAAI,SAAC4D,GAAD,OACX,cAACC,EAAA,EAAD,CAA0B3D,MAAO0D,EAAOlD,GAAxC,SACGkD,EAAOvD,MADKuD,EAAOlD,YAO5B,cAACO,EAAA,EAAD,CACEnC,GAAI,CAAEuE,GAAI,EAAGS,GAAI,EAAGC,GAAI,GACxB7C,MAAM,UACNC,SAAU1C,EACV2C,KAAK,SACLC,QAAQ,YALV,4BAcR,cAAC,EAAD,CACErE,cAAeA,EACfC,OAAQA,EACRF,QAASA,Q,gBCjBFiH,UArLQ,WACrB,IAAQC,EAAaC,cAAbD,SACR,EAA8B7G,mBAAS,IAAvC,mBAAOL,EAAP,KAAgBoH,EAAhB,KACA,EAAkC/G,mBAAS,IAA3C,mBAAOgH,EAAP,KAAkBnC,EAAlB,KACA,EAAgD7E,mBAAS,IAAzD,mBAAOiH,EAAP,KAAyBnH,EAAzB,KAIM8E,EAAoB,uCAAG,WAAOsC,GAAP,eAAA1G,EAAA,sEACD+E,IAAY4B,SACpC,4BACA,CACEC,OAAO,eACFF,KALkB,OACrBG,EADqB,OAS3BN,EAAWM,GATgB,2CAAH,sDAcpBxH,EAAM,uCAAG,gCAAAW,EAAA,yDACbM,QAAQuE,IAAI,QACNiC,EAFO,eAEgBN,GACvBO,EAHO,YAGeN,GAEtBO,EALO,2BAMRF,GANQ,IAOXG,YAAY,YAAKF,MAEfD,GAAsC,IAAnBC,EATV,wBAUXG,IAAMC,QAAQ,yBAVH,SAWLC,YAAK,KAXA,OAYXF,IAAMG,UAZK,mDAeHtC,IACHuC,SAAS,uBADN,eAECN,IAEJ5B,MAAK,SAACC,GAEa,KAAdA,EAAIkC,QACNL,IAAM9G,QAAQiF,EAAI7E,YAtBf,2DA0BTF,QAAQuE,IAAR,MA1BS,QA8BbvE,QAAQuE,IAAImC,GA9BC,2DAAH,qDA8DZ,OACE,qCACE,cAAC,IAAD,UACE,8DAEF,eAACjE,EAAA,EAAD,CACE7B,GAAI,CACFsG,gBAAiB,qBACjBC,UAAW,OACXC,GAAI,GAJR,UAOE,cAACC,EAAA,EAAD,CAAWC,WAAUvB,EAASwB,SAAU,KAAxC,SACE,cAACC,EAAA,EAAD,CAAMC,WAAS,EAAC7E,eAAe,gBAAgB8E,QAAS,EAAxD,SACE,eAACF,EAAA,EAAD,CAAMG,MAAI,EAAV,UACE,cAACC,EAAA,EAAD,CAAY5E,MAAM,cAAcG,QAAQ,KAAxC,0BAGA,eAAC0E,EAAA,EAAD,CACE3G,aAAW,aACX4G,UAAW,cAACC,EAAA,EAAD,CAAkBC,SAAS,UACtCpH,GAAI,CAAEuE,GAAI,GAHZ,UAKE,cAAC8C,EAAA,EAAD,CACEjF,MAAM,cACNf,UAAWiG,IACXC,GAAG,aACHhF,QAAQ,YAJV,uBAQA,cAAC8E,EAAA,EAAD,CACEjF,MAAM,cACNf,UAAWiG,IACXC,GAAG,wBACHhF,QAAQ,YAJV,6BASA,cAAC8E,EAAA,EAAD,CACEjF,MAAM,cACNf,UAAWiG,IACXC,GAAG,uBACHhF,QAAQ,YAJV,uBAQA,cAACyE,EAAA,EAAD,CAAY5E,MAAM,gBAAlB,4BACA,cAACiF,EAAA,EAAD,CACEjF,MAAM,cACNf,UAAWiG,IACXC,GAAG,aACHhF,QAAQ,YAJV,+BASF,eAACV,EAAA,EAAD,CACE7B,GAAI,CACFwH,IAAK,EACLC,IAAK,EACLlD,GAAI,GAJR,UAOE,cAACpC,EAAA,EAAD,CACEC,MAAM,UACNsF,UAAW,cAACC,EAAA,EAAD,CAAYP,SAAS,UAChCpH,GAAI,CAAE4H,EAAG,GACTrF,QAAQ,OAJV,oBAQA,cAACJ,EAAA,EAAD,CACEC,MAAM,UACNsF,UAAW,cAACG,EAAA,EAAD,CAAcT,SAAS,UAClCpH,GAAI,CAAE4H,EAAG,GACTrF,QAAQ,OAJV,8BAYR,cAAC,EAAD,CACEY,aAAcA,EACdjF,cApHc,SAACD,GACrBmB,QAAQuE,IAAI,MAAO1F,GACnB,IAAM6J,EAAQ,YAAOvC,GAEjBwC,EAAM,CACRC,cAAe/J,EAAQgK,MACvBC,WAAYjK,EAAQ2D,GACpBJ,MAAOvD,EAAQuD,MACfC,QAASxD,EAAQwD,QACjB0G,aAAclK,EAAQsD,KACtB6G,YAAanK,EAAQyD,MACrBC,OAAQ1D,EAAQ0D,OAChBL,OAAQrD,EAAQqD,QAEZ+G,EAAYP,EAASO,WAAU,SAAClE,GACpC,OAAOA,EAAI7C,QAAUrD,EAAQqD,UAE3B+G,GAAa,EACfP,EAASO,GAAaN,EAEtBD,EAASQ,KAAT,eACKP,IAGP3I,QAAQuE,IAAI0E,GACZjK,EAAoB0J,IA4Fd7J,QAASA,EACTE,OAAQA,EACR+E,qBAAsBA,Y,iCCpMhC,mBAEM2E,EAAWU,YACf,qBACEC,MAAM,6BACNC,QAAQ,YACRC,KAAK,eAHP,SAKE,sBACEC,SAAS,UACTC,EAAE,wLACFC,SAAS,cAEL,YAGKhB,O,iCChBf,mBAEMF,EAASY,YACb,qBACEC,MAAM,6BACNC,QAAQ,YACRC,KAAK,eAHP,SAKE,sBACEC,SAAS,UACTC,EAAE,yLACFC,SAAS,cAEL,UAGKlB,O,gFChBf,qBAIImB,GAJJ,MAIYC,KAAKC,MAAMC,aAAaC,QAAQ,iBAM7B,eAAsB,IAC7BrF,EAAcsF,IAAMC,OAAO,CAC/BC,QAAS,yBACTC,QAAS,CACPC,cAAc,UAAD,OAAYT,MAsC7B,OAxBAjF,EAAY2F,aAAaC,SAASC,KAChC,SAACD,GAAD,OACE,IAAIE,SAAQ,SAACC,EAASC,GACpBD,EAAQH,SAEZ,SAACpK,GACA,OAAKA,EAAMoK,UAKmB,KAAzBpK,EAAMoK,SAASpD,QACjBjH,QAAQuE,IAAI,wBASPgG,QAAQE,OAAOxK,IAdd,IAAIsK,SAAQ,SAACC,EAASC,GAC3BA,EAAOxK,SAgBPwE,I,gHChDII,G,OAAO,uCAAG,WAAO6F,GAAP,iBAAAhL,EAAA,sEACE+E,IAAYC,QAAZ,UAAuBgG,IADzB,cACfC,EADe,gBAECA,EAFD,cAEftI,EAFe,yBAGdA,GAHc,2CAAH","file":"static/js/80.60d870df.chunk.js","sourcesContent":["import React,{ useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as Yup from \"yup\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  FormHelperText,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Divider,\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormLabel,\r\n  Radio,\r\n  RadioGroup,\r\n} from \"@material-ui/core\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport { Field, Formik } from \"formik\";\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n});\r\n\r\nconst StudentToExamsList = (props) => {\r\n  const classes = useStyles();\r\n  const { student,studentRecord,setSelectedStudents, onSave,...other } = props;\r\n  const [error, setError] = useState(null);\r\n  \r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        submit: null,\r\n      }}\r\n      validationSchema={Yup.object().shape({})}\r\n      onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n        try {\r\n          \r\n          if (onSave) {\r\n            onSave();\r\n             setStatus({ success: true });\r\n             setSubmitting(false);\r\n          }\r\n        } catch (err) {\r\n          console.error(err);\r\n          setStatus({ success: false });\r\n          setErrors({ submit: err.message });\r\n          setSubmitting(false);\r\n        }\r\n      }}\r\n    >\r\n      {({\r\n        errors,\r\n        handleBlur,\r\n        handleChange,\r\n        handleSubmit,\r\n        isSubmitting,\r\n        setFieldValue,\r\n        setFieldTouched,\r\n        touched,\r\n        values,\r\n      }) => (\r\n        <form onSubmit={handleSubmit} {...other}>\r\n          <Card sx={{ p: 3 }}>\r\n            {/* <AttendenceTable student={student} /> */}\r\n\r\n            <Divider />\r\n            <TableContainer>\r\n              <Table className={classes.table} aria-label=\"simple table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>\r\n                      {\" \"}\r\n                    \r\n                      <Checkbox\r\n                        role=\"checkbox\"\r\n                        // defaultChecked\r\n                        hover=\"true\"\r\n                        // value={row}\r\n                        onChange={() => {\r\n                          studentRecord(student);\r\n                        }}\r\n                     \r\n                        inputProps={{\r\n                          \"aria-labelledby\": \"primary checkbox\",\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n\r\n                    <TableCell>Roll No</TableCell>\r\n                    <TableCell colSpan={1}>Student Name</TableCell>\r\n                    <TableCell colSpan={1}>Class</TableCell>\r\n                    <TableCell colSpan={1}>Section</TableCell>\r\n                    <TableCell colSpan={1}>Father Name</TableCell>\r\n\r\n                    <TableCell>Gender</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {\r\n                    student.length > 0\r\n                      ? student.map((row) => (\r\n                          <TableRow key={row.id}>\r\n                            <TableCell>\r\n                              <Checkbox\r\n                                role=\"checkbox\"\r\n                                // defaultChecked\r\n                                hover=\"true\"\r\n                                value={row}\r\n                                onChange={() => {\r\n                                  studentRecord(row);\r\n                                }}\r\n                                // checked={row.id}\r\n                                // onChange={() => {\r\n                                //   setSelectedStudents({ ...row, ab: \"1\" });\r\n                                // }}\r\n                                // checked={isItemSelected}\r\n                                inputProps={{\r\n                                  \"aria-labelledby\": \"primary checkbox\",\r\n                                }}\r\n                              />\r\n                            </TableCell>\r\n                            <TableCell component=\"th\">{row.rollno}</TableCell>\r\n                            <TableCell\r\n                            // id=\"\"\r\n                            //  value={values.id}\r\n                            >\r\n                              {`${row.name}`}\r\n                            </TableCell>\r\n                            <TableCell>{row.class}</TableCell>\r\n\r\n                            <TableCell>{row.section}</TableCell>\r\n                            <TableCell>{row.fname}</TableCell>\r\n\r\n                            <TableCell>{row.gender}</TableCell>\r\n                          </TableRow>\r\n                        ))\r\n                      : null\r\n                    // <TableRow\r\n                    //   style={{\r\n                    //     display: \"flex\",\r\n                    //     justifyContent: \"center\",\r\n                    //     alignItems: \"center\",\r\n                    //   }}\r\n                    // >\r\n                    //   Data Not Found{\" \"}\r\n                    // </TableRow>\r\n                  }\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n            <Box\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"flex-end\",\r\n                marginTop: 10,\r\n              }}\r\n            >\r\n              <Box sx={{ flexGrow: 1 }} />\r\n              <Button\r\n                color=\"primary\"\r\n                disabled={isSubmitting}\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n              >\r\n                Save\r\n              </Button>\r\n            </Box>\r\n          </Card>\r\n        </form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\n// StudentToExamsList.propTypes = {\r\n//   onBack: PropTypes.func,\r\n//   onComplete: PropTypes.func,\r\n// };\r\n\r\nexport default StudentToExamsList;\r\n","import React from \"react\";\r\nimport * as Yup from \"yup\";\r\nimport {\r\n  Box,\r\n  Card,\r\n  TextField,\r\n  Typography,\r\n  MenuItem,\r\n  Button,\r\n  FormControl,\r\n  Select,\r\n  InputLabel,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Formik } from \"formik\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Section } from \"../HelperFunction\";\r\nimport StudentToExamsList from \"./StudentToExamsList\";\r\nimport {customAxios} from \"../apis/Axios\";\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 700,\r\n    // marginTop:10\r\n  },\r\n  hedds: {\r\n    width: \"20%\",\r\n    // padding: \"12px 20px\",\r\n    margin: \"8px 10px\",\r\n    display: \"inline-block\",\r\n    border: \"1px solid #ccc\",\r\n    borderRadius: \"4px\",\r\n    // box-sizing:,\r\n  },\r\n  feild: {\r\n    width: \"20%\",\r\n    marginLeft: 8,\r\n  },\r\n  feilds: {\r\n    width: \"20%\",\r\n    marginLeft: 8,\r\n    // marginTop: 8,\r\n    marginBottom: 10,\r\n  },\r\n});\r\n\r\nconst StudentToExamsInput = ({\r\n  allStudentAttendence,\r\n  setexamFeild,\r\n  student,\r\n  onSave,\r\n  studentRecord,\r\n}) => {\r\n  const classes = useStyles();\r\n  const [examgroup, setExamgroup] = useState([]);\r\n  const [examsName, setExamsName] = useState([]);\r\n\r\n  const [classRoom, setClassRoom] = useState([]);\r\n  const [section, setSection] = useState([]);\r\nconsole.log(examsName);\r\n  useEffect(async () => {\r\n    const examsGroupData = await customAxios.getCall(\r\n      \"exams/examsgroup\"\r\n    );\r\n\r\n    setExamgroup(examsGroupData);\r\n\r\n    const examsNameData = await customAxios.getCall(\r\n      \"exams/examsName\"\r\n    );\r\n    setExamsName(examsNameData);\r\n\r\n    const fun = Section(\"class/api\");\r\n    fun.then((res) => {\r\n      setClassRoom(res);\r\n    });\r\n    const fun1 = Section(\"class/api/section\");\r\n    fun1.then((res) => {\r\n      setSection(res);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        initialValues={{\r\n          examsGroup: \"\",\r\n          examsName: \"\",\r\n          classid: \"\",\r\n          sectionid: \"\",\r\n        }}\r\n        validationSchema={Yup.object().shape({})}\r\n        onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n    \r\n          setexamFeild(values)\r\n          allStudentAttendence(values);\r\n          // It is important to have it on server to be able to reuse it if user\r\n          // decides to continue later.\r\n          //   if (onNext) {\r\n          //     allStudentAttendence(data);\r\n          //     onNext();\r\n          //   }\r\n          //   setStatus({ success: true });\r\n          //   setSubmitting(false);\r\n          // } catch (err) {\r\n          //   console.error(err);\r\n          //   setStatus({ success: false });\r\n          //   setErrors({ submit: err.message });\r\n          //   setSubmitting(false);\r\n          // }\r\n        }}\r\n      >\r\n        {({\r\n          errors,\r\n          handleBlur,\r\n          handleChange,\r\n          handleSubmit,\r\n          isSubmitting,\r\n          setFieldValue,\r\n          setFieldTouched,\r\n          touched,\r\n          values,\r\n        }) => (\r\n          <form onSubmit={handleSubmit}>\r\n            {/* <Card sx={{ p: 3 }}> */}\r\n            <Box sx={{ mt: 2 }}>\r\n              <FormControl className={classes.feilds}>\r\n                <InputLabel id=\"examsGroup\">Exams Group</InputLabel>\r\n\r\n                <Select\r\n                  fullWidth\r\n                  labelId=\"examsGroup\"\r\n                  value={values.examsGroup}\r\n                  onChange={handleChange}\r\n                  id=\"examsGroup\"\r\n                  label=\"exams Group\"\r\n                  name=\"examsGroup\"\r\n                >\r\n                  {examgroup.map((option) => (\r\n                    <MenuItem key={option.id} value={option.id}>\r\n                      {option.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n\r\n              <FormControl className={classes.feilds}>\r\n                <InputLabel id=\"examsName\">Exams Name</InputLabel>\r\n\r\n                <Select\r\n                  fullWidth\r\n                  labelId=\"examsName\"\r\n                  value={values.examsName}\r\n                  onChange={handleChange}\r\n                  id=\"examsName\"\r\n                  label=\"exams Name\"\r\n                  name=\"examsName\"\r\n                >\r\n                  {examsName.map((option) => (\r\n                    <MenuItem key={option.id} value={option.id}>\r\n                      {option.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n              <FormControl className={classes.feild}>\r\n                <InputLabel id=\"classid\">Department/Class</InputLabel>\r\n\r\n                <Select\r\n                  fullWidth\r\n                  labelId=\"classid\"\r\n                  value={values.classid}\r\n                  onChange={handleChange}\r\n                  id=\"classid\"\r\n                  label=\"Department/Class\"\r\n                  name=\"classid\"\r\n                >\r\n                  {classRoom.map((option) => (\r\n                    <MenuItem key={option.id} value={option.id}>\r\n                      {option.className}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n              <FormControl className={classes.feild}>\r\n                <InputLabel id=\"sectionid\">Section</InputLabel>\r\n\r\n                <Select\r\n                  fullWidth\r\n                  labelId=\"sectionid\"\r\n                  value={values.sectionid}\r\n                  onChange={handleChange}\r\n                  id=\"sectionid\"\r\n                  label=\"Section\"\r\n                  name=\"sectionid\"\r\n                >\r\n                  {section.map((option) => (\r\n                    <MenuItem key={option.id} value={option.id}>\r\n                      {option.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n\r\n              <Button\r\n                sx={{ mt: 1, mr: 2, ml: 2 }}\r\n                color=\"primary\"\r\n                disabled={isSubmitting}\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n              >\r\n                Search\r\n              </Button>\r\n            </Box>\r\n            {/* </Card> */}\r\n          </form>\r\n        )}\r\n      </Formik>\r\n      <StudentToExamsList\r\n        studentRecord={studentRecord}\r\n        onSave={onSave}\r\n        student={student}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default StudentToExamsInput;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Breadcrumbs,\r\n  Button,\r\n  Container,\r\n  Grid,\r\n  Box,\r\n  Typography,\r\n  Link,\r\n} from \"@material-ui/core\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\nimport ChevronRightIcon from \"../../icons/ChevronRight\";\r\nimport UploadIcon from \"../../icons/Upload\";\r\nimport DownloadIcon from \"../../icons/Download\";\r\nimport useSettings from \"../../hooks/useSettings\";\r\nimport axios from \"axios\";\r\nimport StudentToExamsInput from \"./StudentToExamsInput\";\r\nimport toast from \"react-hot-toast\";\r\nimport wait from \"../../utils/wait\";\r\nimport {customAxios} from \"../apis/Axios\";\r\n\r\nconst StudentToExams = () => {\r\n  const { settings } = useSettings();\r\n  const [student, setStudent] = useState([]);\r\n  const [examFeild, setexamFeild] = useState({});\r\n  const [selectedStudents, setSelectedStudents] = useState([]);\r\n\r\n  // console.log(student);\r\n\r\n  const allStudentAttendence = async (data) => {\r\n    const studentData = await customAxios.getCalls(\r\n      \"attendence/api/attendence\",\r\n      {\r\n        params: {\r\n          ...data,\r\n        },\r\n      }\r\n    );\r\n    setStudent(studentData);\r\n    // console.log(studentData.data);\r\n    //  res.json;\r\n  };\r\n\r\n  const onSave = async () => {\r\n    console.log(\"save\");\r\n    const studentCopylist = { ...examFeild };\r\n    const studentDatalist = [...selectedStudents];\r\n\r\n    const combineForm = {\r\n      ...studentCopylist,\r\n      studentList: [...studentDatalist],\r\n    };\r\n    if (studentCopylist && studentDatalist == \"\") {\r\n      toast.loading(\"please Select Student\");\r\n      await wait(2000);\r\n      toast.dismiss();\r\n    } else {\r\n      try {\r\n        await customAxios\r\n          .postCall(\"exams/examsToStudent\", {\r\n            ...combineForm,\r\n          })\r\n          .then((res) => {\r\n            // console.log( res.data);\r\n            if (res.status == 200) {\r\n              toast.success(res.message);\r\n            }\r\n          });\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n\r\n    console.log(combineForm);\r\n  };\r\n\r\n  const studentRecord = (student) => {\r\n    console.log(\"stu\", student);\r\n    const selected = [...selectedStudents];\r\n\r\n    let obj = {\r\n      addmission_id: student.addid,\r\n      Student_id: student.id,\r\n      class: student.class,\r\n      section: student.section,\r\n      student_name: student.name,\r\n      father_name: student.fname,\r\n      gender: student.gender,\r\n      rollno: student.rollno,\r\n    };\r\n    const findIndex = selected.findIndex((res) => {\r\n      return res.rollno == student.rollno;\r\n    });\r\n    if (findIndex >= 0) {\r\n      selected[findIndex] = obj;\r\n    } else {\r\n      selected.push({\r\n        ...obj,\r\n      });\r\n    }\r\n    console.log(findIndex);\r\n    setSelectedStudents(selected);\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Dashboard: Examination </title>\r\n      </Helmet>\r\n      <Box\r\n        sx={{\r\n          backgroundColor: \"background.default\",\r\n          minHeight: \"100%\",\r\n          py: 1,\r\n        }}\r\n      >\r\n        <Container maxWidth={settings.compact ? \"xl\" : false}>\r\n          <Grid container justifyContent=\"space-between\" spacing={3}>\r\n            <Grid item>\r\n              <Typography color=\"textPrimary\" variant=\"h5\">\r\n                Assign Exams\r\n              </Typography>\r\n              <Breadcrumbs\r\n                aria-label=\"breadcrumb\"\r\n                separator={<ChevronRightIcon fontSize=\"small\" />}\r\n                sx={{ mt: 1 }}\r\n              >\r\n                <Link\r\n                  color=\"textPrimary\"\r\n                  component={RouterLink}\r\n                  to=\"/dashboard\"\r\n                  variant=\"subtitle2\"\r\n                >\r\n                  Dashboard\r\n                </Link>\r\n                <Link\r\n                  color=\"textPrimary\"\r\n                  component={RouterLink}\r\n                  to=\"/dashboard/examsGroup\"\r\n                  variant=\"subtitle2\"\r\n                >\r\n                  Exam Group List\r\n                </Link>\r\n\r\n                <Link\r\n                  color=\"textPrimary\"\r\n                  component={RouterLink}\r\n                  to=\"/dashboard/examsList\"\r\n                  variant=\"subtitle2\"\r\n                >\r\n                  Exam List\r\n                </Link>\r\n                <Typography color=\"textSecondary\">Assign Student</Typography>\r\n                <Link\r\n                  color=\"textPrimary\"\r\n                  component={RouterLink}\r\n                  to=\"/dashboard\"\r\n                  variant=\"subtitle2\"\r\n                >\r\n                  Exams Subjects\r\n                </Link>\r\n              </Breadcrumbs>\r\n              <Box\r\n                sx={{\r\n                  mb: -1,\r\n                  mx: -1,\r\n                  mt: 1,\r\n                }}\r\n              >\r\n                <Button\r\n                  color=\"primary\"\r\n                  startIcon={<UploadIcon fontSize=\"small\" />}\r\n                  sx={{ m: 1 }}\r\n                  variant=\"text\"\r\n                >\r\n                  Import\r\n                </Button>\r\n                <Button\r\n                  color=\"primary\"\r\n                  startIcon={<DownloadIcon fontSize=\"small\" />}\r\n                  sx={{ m: 1 }}\r\n                  variant=\"text\"\r\n                >\r\n                  Export\r\n                </Button>\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n        <StudentToExamsInput\r\n          setexamFeild={setexamFeild}\r\n          studentRecord={studentRecord}\r\n          student={student}\r\n          onSave={onSave}\r\n          allStudentAttendence={allStudentAttendence}\r\n        />\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default StudentToExams;\r\n","import createSvgIcon from '@material-ui/core/utils/createSvgIcon';\n\nconst Download = createSvgIcon(\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 20 20\"\n    fill=\"currentColor\"\n  >\n    <path\n      fillRule=\"evenodd\"\n      d=\"M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z\"\n      clipRule=\"evenodd\"\n    />\n  </svg>, 'Download'\n);\n\nexport default Download;\n","import createSvgIcon from '@material-ui/core/utils/createSvgIcon';\n\nconst Upload = createSvgIcon(\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 20 20\"\n    fill=\"currentColor\"\n  >\n    <path\n      fillRule=\"evenodd\"\n      d=\"M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM6.293 6.707a1 1 0 010-1.414l3-3a1 1 0 011.414 0l3 3a1 1 0 01-1.414 1.414L11 5.414V13a1 1 0 11-2 0V5.414L7.707 6.707a1 1 0 01-1.414 0z\"\n      clipRule=\"evenodd\"\n    />\n  </svg>, 'Upload'\n);\n\nexport default Upload;\n","import axios from \"axios\";\r\nimport wait from \"../../utils/wait\";\r\n//attach authorization token and other common stuffs\r\n\r\nlet token = JSON.parse(localStorage.getItem(\"accessToken\")) ;\r\n// let token = localStorage.getItem(\"accessToken\")\r\n//   ? JSON.parse(localStorage.getItem(\"accessToken\"))\r\n//   : null;\r\n\r\n  // console.log(token)\r\nexport default (navigate = null) => {\r\n  const customAxios = axios.create({\r\n    baseURL: \"http://localhost:8000/\",\r\n    headers: {\r\n      authorization: `bearer ${token}`,\r\n    },\r\n  });\r\n\r\nfunction getTokenFromLocalStorage() {\r\n  const token = localStorage.getItem(\"accessToken\");\r\n  console.log(\"the token from local storage is -> \" + token);\r\n  if (token === null) {\r\n    return undefined;\r\n  }\r\n  return token;\r\n}\r\n\r\n\r\n  customAxios.interceptors.response.use(\r\n    (response) =>\r\n      new Promise((resolve, reject) => {\r\n        resolve(response);\r\n      }),\r\n    (error) => {\r\n     if (!error.response) { \r\n       return new Promise((resolve, reject) => {\r\n         reject(error);\r\n       });\r\n     }\r\n      if (error.response.status == 401) {\r\n        console.log(\"your are not logedin\");\r\n        // localStorage.removeItem(\"accessToken\");\r\n        // localStorage.removeItem(\"user\");\r\n        // if(navigate){\r\n        //   navigate(\"/authentication/login-unguarded\");\r\n        // }else{\r\n        //   window.location.href = \"/authentication/login-unguarded\";\r\n        // }\r\n      }\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n  return customAxios\r\n};\r\n\r\n","import axios from \"axios\";\r\nimport {customAxios} from \"./apis/Axios\";\r\nimport userService from \"./apis/userService\";\r\n\r\nexport const Section = async (endpoint) => {\r\n  const responce = await customAxios.getCall(`${endpoint}`);\r\n  const section = await responce;\r\n  return section;\r\n};\r\n\r\n// export const getAPI = async (endpoint, params={}) => {\r\n//   const responce = await axios.get(`${URL}${endpoint}`, {params:{...params}});\r\n//   // console.log(b.data)\r\n//   const section = await responce.data;\r\n//   return section;\r\n// };\r\n\r\n// export const postAPI = async (endpoint, data= {}) => {\r\n//   const responce = await axios.post(`${URL}${endpoint}`, {...data});\r\n//   // console.log(b.data)\r\n//   const section = await responce.data;\r\n//   return section;\r\n// };\r\n"],"sourceRoot":""}