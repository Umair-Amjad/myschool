{"version":3,"sources":["mangement/teachers/TeacherForm.js","mangement/apis/Api.js","mangement/HelperFunction.js"],"names":["useStyles","makeStyles","theme","button","marginRight","spacing","religions","value","label","Genders","Role","MaritalStatus","Contract","BasicForm","sectionobj","classObj","useFormContext","control","errors","formState","name","rules","required","render","field","id","variant","fullWidth","margin","error","Boolean","staffid","helperText","message","labelId","map","option","placeholder","type","ContactForm","PersonalForm","Document","register","setValue","useState","imagePreview","setImagePreview","component","src","height","alt","hidden","onChange","event","file","target","files","reader","FileReader","onload","result","readAsDataURL","getStepContent","step","StudentAdmissionForm","props","setSection","setClassObj","state","useLocation","useNavigate","row","role","firstName","fname","motherName","gender","email","dob","joningDate","phone","maritalStatus","CNIC","qualification","workExperince","religion","epfNo","baiscSalery","workShift","contractType","location","payScal","address1","address2","zipcode","permanentAddress","useEffect","Section","then","res","classes","methods","useForm","defaultValues","staff_id","first_name","father_name","mother_name","date_of_joining","marital_status","CNIC_No","work_experience","epf_No","basic_salery","work_shift","contract","payscall","zipCode","Per_address","submit","activeStep","setActiveStep","skippedSteps","setSkippedSteps","steps","isStepOptional","isStepSkipped","includes","handleNext","data","a","length","formData","FormData","append","photo","fatherCNIC","axios","post","headers","json","catch","err","console","log","toast","success","filter","skipItem","style","padding","paddingBottom","marginTop","container","justifyContent","color","alternativeLabel","index","labelProps","stepProps","optional","align","display","completed","key","onSubmit","handleSubmit","className","disabled","onClick","token","JSON","parse","localStorage","getItem","customAxios","create","baseURL","authorization","interceptors","response","use","Promise","resolve","reject","status","endpoint","getCall","responce","section"],"mappings":"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","file":"static/js/94.36939332.chunk.js","sourcesContent":["// const religions = [\r\n//   {\r\n//     value: \"0\",\r\n//     label: \"Islam\",\r\n//   },\r\n//   {\r\n//     value: \"1\",\r\n//     label: \"Hindu\",\r\n//   },\r\n//   {\r\n//     value: \"2\",\r\n//     label: \"Cristion\",\r\n//   },\r\n// ];\r\n// const Genders = [\r\n//   {\r\n//     label: \"male\",\r\n//     value: \"0\",\r\n//   },\r\n//   {\r\n//     label: \"Female\",\r\n//     value: \"1\",\r\n//   },\r\n//   {\r\n//     label: \"Other\",\r\n//     value: \"2\",\r\n//   },\r\n// ];\r\n// import {\r\n//   Box,\r\n//   Button,\r\n//   Card,\r\n//   CardContent,\r\n//   CircularProgress,\r\n//   FormControl,\r\n//   FormControlLabel,\r\n//   FormLabel,\r\n//   Grid,\r\n//   MenuItem,\r\n//   Radio,\r\n//   Stack,\r\n//   Step,\r\n//   StepLabel,\r\n//   Stepper,\r\n//   Typography,\r\n// } from \"@material-ui/core\";\r\n// import { Field, Form, Formik } from \"formik\";\r\n// import { Select, TextField } from \"formik-material-ui\";\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { mixed, number, string, object } from \"yup\";\r\n// import { useLocation, useNavigate } from \"react-router-dom\";\r\n// import toast from \"react-hot-toast\";\r\n// import { Section } from \"../HelperFunction\";\r\n// import {customAxios} from \"../apis/Axios\";\r\n// const sleep = (time) => new Promise((acc) => setTimeout(acc, time));\r\n\r\n// export default function Home() {\r\n//   const [classObj, setClassObj] = useState([]);\r\n//   const [sectionobj, setSection] = useState([]);\r\n//   const { state } = useLocation();\r\n//   const Navigate = useNavigate();\r\n//   // const classData = async () => {\r\n//   //   const classData = await axios.get(\"http://localhost:8000/class/api\");\r\n//   //   setClassObj(classData.data);\r\n//   // };\r\n//   if (state === null) {\r\n//     var row = {\r\n//       id: \"\",\r\n//       staffid: \"\",\r\n//       role: \"\",\r\n//       firstName: \"\",\r\n//       fname: \"\",\r\n//       motherName: \"\",\r\n//       gender: \"\",\r\n//       email: \"\",\r\n//       dob: \"\",\r\n//       joningDate: \"\",\r\n//       phone: \"\",\r\n//       maritalStatus: \"\",\r\n//       CNIC: \"\",\r\n//       qualification: \"\",\r\n//       workExperince: \"\",\r\n//       religion: \"\",\r\n//       epfNo: \"\",\r\n//       baiscSalery: \"\",\r\n//       workShift: \"\",\r\n//       contractType: \"\",\r\n//       location: \"\",\r\n//       payScal: \"\",\r\n//       address1: \"\",\r\n//       address2: \"\",\r\n//       zipcode: \"\",\r\n//       permanentAddress: \"\",\r\n//     };\r\n//   } else {\r\n//     state.row;\r\n//     var { row } = state;\r\n//   }\r\n\r\n//   useEffect(() => {\r\n//     const fun = Section(\"class/api\");\r\n//     fun.then((res) => {\r\n//       setClassObj(res);\r\n//     });\r\n//     const fun1 = Section(\"class/api/section\");\r\n//     fun1.then((res) => {\r\n//       setSection(res);\r\n//     });\r\n//   }, []);\r\n//   const Role = [\r\n//     { label: \"Teacher\", value: \"1\" },\r\n//     { label: \"Staff\", value: \"2\" },\r\n//     { label: \"Accounts\", value: \"3\" },\r\n//     { label: \"other's\", value: \"4\" },\r\n//   ];\r\n//   const MaritalStatus = [\r\n//     { label: \"Single\", value: \"1\" },\r\n//     { label: \"Married\", value: \"2\" },\r\n//     { label: \"Widow\", value: \"3\" },\r\n//     { label: \"Other\", value: \"4\" },\r\n//   ];\r\n//   const Contract = [\r\n//     {\r\n//       label: \"Permanent\",\r\n//       value: \"1\",\r\n//     },\r\n//     { label: \"Temporory\", value: \"2\" },\r\n//   ];\r\n//   console.log(row)\r\n//   return (\r\n//     <Card>\r\n//       <CardContent>\r\n//         <FormikStepper\r\n//           initialValues={{\r\n//             staffid: row.staff_id || \"\",\r\n//             role: row.Role || \"\",\r\n//             firstName: row.first_name || \"\",\r\n//             fname: row.father_name || \"\",\r\n//             motherName: row.mother_name || \"\",\r\n//             gender: row.gender || \"\",\r\n//             email: row.email || \"\",\r\n//             dob: row.dob || \"\",\r\n//             joningDate: row.date_of_joining || \"\",\r\n//             phone: row.phone || \"\",\r\n//             maritalStatus: row.marital_status || \"\",\r\n//             CNIC: row.CNIC_No || \"\",\r\n//             qualification: row.qualification || \"\",\r\n//             workExperince: row.work_experience || \"\",\r\n//             religion: row.religion || \"\",\r\n//             epfNo: row.epf_No || \"\",\r\n//             baiscSalery: row.basic_salery || \"\",\r\n//             workShift: row.work_shift || \"\",\r\n//             contractType: row.contract || \"\",\r\n//             location: row.location || \"\",\r\n//             payScal: row.payscall || \"\",\r\n//             address1: row.address1 || \"\",\r\n//             address2: row.address2 || \"\",\r\n//             zipcode: row.zipCode || \"23610\",\r\n//             permanentAddress: row.Per_address || \"\",\r\n//           }}\r\n//           onSubmit={async (values) => {\r\n//             await sleep(3000);\r\n//             const data = { ...values, id: row.id ? row.id : \"\" };\r\n//             console.log(data);\r\n//             try {\r\n//               await customAxios.postCall(\"teacher/addupdate\", { ...data })\r\n//                 .then((res) => {\r\n//                   res.json;\r\n//                 })\r\n//                 .catch((err) => {\r\n//                   console.log(err);\r\n//                 });\r\n//               toast.success(row.id ? \"Update Data \" : \"Add SuccessFully\");\r\n\r\n//               Navigate(\"../teachers\");\r\n//             } catch (err) {\r\n//               console.log(err);\r\n//             }\r\n//           }}\r\n//         >\r\n//           <FormikStep\r\n//             label=\"Basic Information\"\r\n//             validationSchema={object({\r\n//               firstName: string().required(\"Enter Your First Name\"),\r\n//               gender: string().nullable().required(),\r\n//               email: string()\r\n//                 .email(\"Must be a valid email\")\r\n//                 .max(255)\r\n//                 .required(\"Email is required\"),\r\n//             })}\r\n//           >\r\n//             <Box>\r\n//               <Field\r\n//                 fullWidth\r\n//                 name=\"staffid\"\r\n//                 component={TextField}\r\n//                 label=\"Staff ID\"\r\n//               />\r\n//             </Box>\r\n//             <FormControl sx={{ mt: 2, mb: 2 }} fullWidth>\r\n//               <Field\r\n//                 fullWidth\r\n//                 component={Select}\r\n//                 // formControl={{ sx}}\r\n//                 id=\"role\"\r\n//                 name=\"role\"\r\n//                 labelId=\"role-simple\"\r\n//                 label=\"Role\"\r\n//               >\r\n//                 {Role.map((option) => (\r\n//                   <MenuItem key={option.value} value={option.value}>\r\n//                     {option.label}\r\n//                   </MenuItem>\r\n//                 ))}\r\n//               </Field>\r\n//             </FormControl>{\" \"}\r\n//             <Box paddingBottom={2}>\r\n//               <Field\r\n//                 fullWidth\r\n//                 name=\"firstName\"\r\n//                 component={TextField}\r\n//                 label=\"First Name\"\r\n//               />\r\n//             </Box>\r\n//             <Box paddingBottom={2}>\r\n//               <Field\r\n//                 fullWidth\r\n//                 name=\"fname\"\r\n//                 component={TextField}\r\n//                 label=\"Father Name\"\r\n//               />\r\n//             </Box>\r\n//             <Box paddingBottom={2}>\r\n//               <Field\r\n//                 fullWidth\r\n//                 name=\"motherName\"\r\n//                 component={TextField}\r\n//                 label=\"Mother Name\"\r\n//               />\r\n//             </Box>\r\n//             <Box paddingBottom={2}>\r\n//               <Field\r\n//                 fullWidth\r\n//                 name=\"email\"\r\n//                 component={TextField}\r\n//                 label=\"E-mail\"\r\n//                 type=\"email\"\r\n//               />\r\n//             </Box>\r\n//             <Box paddingBottom={2}>\r\n//               <FormControl fullWidth>\r\n//                 <Field\r\n//                   fullWidth\r\n//                   component={Select}\r\n//                   id=\"gender\"\r\n//                   name=\"gender\"\r\n//                   labelId=\"gender-simple\"\r\n//                   label=\"Gender\"\r\n//                 >\r\n//                   {Genders.map((option) => (\r\n//                     <MenuItem key={option.value} value={option.label}>\r\n//                       {option.label}\r\n//                     </MenuItem>\r\n//                   ))}\r\n//                 </Field>\r\n//               </FormControl>{\" \"}\r\n//             </Box>\r\n//             <Box paddingBottom={2}>\r\n//               <Field\r\n//                 fullWidth\r\n//                 component={TextField}\r\n//                 type=\"date\"\r\n//                 // label=\"label\"\r\n//                 formhelpertext={{ children: \"Date Of Birth\" }}\r\n//                 name=\"dob\"\r\n//                 inputFormat=\"MM/dd/yyyy\"\r\n//               />\r\n//             </Box>\r\n//             <Box paddingBottom={2}>\r\n//               <Field\r\n//                 fullWidth\r\n//                 component={TextField}\r\n//                 type=\"date\"\r\n//                 // label=\"label\"\r\n//                 name=\"joningDate\"\r\n//                 inputFormat=\"MM/dd/yyyy\"\r\n//               />\r\n//             </Box>\r\n//             <Box>\r\n//               <Field\r\n//                 fullWidth\r\n//                 name=\"CNIC\"\r\n//                 component={TextField}\r\n//                 label=\"Teacher's Form B/CNIC No\"\r\n//                 type=\"number\"\r\n//               />\r\n//             </Box>{\" \"}\r\n//             <Box paddingBottom={2} paddingTop={2}>\r\n//               <Field\r\n//                 fullWidth\r\n//                 name=\"phone\"\r\n//                 component={TextField}\r\n//                 label=\"Phone Number \"\r\n//                 type=\"number\"\r\n//               />\r\n//             </Box>\r\n//             <Box>\r\n//               <FormControl fullWidth>\r\n//                 <Field\r\n//                   fullWidth\r\n//                   component={Select}\r\n//                   id=\"maritalStatus\"\r\n//                   name=\"maritalStatus\"\r\n//                   labelId=\"maritalStatus-simple\"\r\n//                   label=\"Marital Status\"\r\n//                 >\r\n//                   {MaritalStatus.map((option) => (\r\n//                     <MenuItem key={option.value} value={option.value}>\r\n//                       {option.label}\r\n//                     </MenuItem>\r\n//                   ))}\r\n//                 </Field>\r\n//               </FormControl>{\" \"}\r\n//             </Box>\r\n//             <Box paddingBottom={2} paddingTop={2}>\r\n//               <Field\r\n//                 fullWidth\r\n//                 name=\"qualification\"\r\n//                 component={TextField}\r\n//                 label=\"Qualification \"\r\n//               />\r\n//             </Box>{\" \"}\r\n//             <Box paddingBottom={2}>\r\n//               <Field\r\n//                 fullWidth\r\n//                 name=\"workExperince\"\r\n//                 component={TextField}\r\n//                 label=\"Work Experince\"\r\n//               />\r\n//             </Box>\r\n//             <Box>\r\n//               <FormControl fullWidth>\r\n//                 <Field\r\n//                   fullWidth\r\n//                   component={Select}\r\n//                   id=\"religion\"\r\n//                   name=\"religion\"\r\n//                   labelId=\"religion-simple\"\r\n//                   label=\"Religion\"\r\n//                 >\r\n//                   {religions.map((option) => (\r\n//                     <MenuItem key={option.value} value={option.value}>\r\n//                       {option.label}\r\n//                     </MenuItem>\r\n//                   ))}\r\n//                 </Field>\r\n//               </FormControl>{\" \"}\r\n//             </Box>\r\n//           </FormikStep>\r\n//           <FormikStep\r\n//             label=\"Pay Roll\"\r\n//             validationSchema={object({\r\n//               // money: mixed().when(\"millionaire\", {\r\n//               //   is: true,\r\n//               //   then: number()\r\n//               //     .required()\r\n//               //     .min(\r\n//               //       1_000_000,\r\n//               //       \"Because you said you are a millionaire you need to have 1 million\"\r\n//               //     ),\r\n//               //   otherwise: number().required(),\r\n//               // }),\r\n//             })}\r\n//           >\r\n//             <Box paddingBottom={2}>\r\n//               <Box paddingBottom={2}>\r\n//                 <Field\r\n//                   fullWidth\r\n//                   name=\"epfNo\"\r\n//                   component={TextField}\r\n//                   label=\"EPF NO\"\r\n//                   type=\"number\"\r\n//                 />\r\n//               </Box>\r\n//               <Box paddingBottom={2}>\r\n//                 <Field\r\n//                   fullWidth\r\n//                   name=\"baiscSalery\"\r\n//                   component={TextField}\r\n//                   label=\"Basic Salery\"\r\n//                   type=\"number\"\r\n//                 />\r\n//               </Box>{\" \"}\r\n//               <Box paddingBottom={2}>\r\n//                 <Field\r\n//                   fullWidth\r\n//                   name=\"workShift\"\r\n//                   component={TextField}\r\n//                   label=\"Work Shift\"\r\n//                 />\r\n//               </Box>\r\n//               <FormControl sx={{ mt: 2, mb: 2 }} fullWidth>\r\n//                 <Field\r\n//                   fullWidth\r\n//                   component={Select}\r\n//                   // formControl={{ sx}}\r\n//                   id=\"contractType\"\r\n//                   name=\"contractType\"\r\n//                   labelId=\"contractType-simple\"\r\n//                   label=\"Contract Type\"\r\n//                 >\r\n//                   {Contract.map((option) => (\r\n//                     <MenuItem key={option.value} value={option.label}>\r\n//                       {option.label}\r\n//                     </MenuItem>\r\n//                   ))}\r\n//                 </Field>\r\n//               </FormControl>{\" \"}\r\n//               <Box paddingBottom={2}>\r\n//                 <Field\r\n//                   fullWidth\r\n//                   name=\"location\"\r\n//                   component={TextField}\r\n//                   label=\"Location\"\r\n//                 />\r\n//               </Box>\r\n//               <Box paddingBottom={2}>\r\n//                 <Field\r\n//                   fullWidth\r\n//                   name=\"payScal\"\r\n//                   component={TextField}\r\n//                   label=\"Pay Scal\"\r\n//                 />\r\n//               </Box>\r\n//             </Box>\r\n//           </FormikStep>\r\n//           <FormikStep label=\"Address\">\r\n//             <Box paddingBottom={2}>\r\n//               <Field\r\n//                 fullWidth\r\n//                 name=\"address1\"\r\n//                 component={TextField}\r\n//                 label=\"Address Line 1\"\r\n//               />\r\n//             </Box>\r\n//             <Box paddingBottom={2}>\r\n//               <Field\r\n//                 fullWidth\r\n//                 name=\"address2\"\r\n//                 component={TextField}\r\n//                 label=\"Address Line 2\"\r\n//               />\r\n//             </Box>\r\n//             <Box paddingBottom={2}>\r\n//               <Field\r\n//                 fullWidth\r\n//                 name=\"zipcode\"\r\n//                 component={TextField}\r\n//                 label=\"Zip Code\"\r\n//               />\r\n//             </Box>\r\n//             <Box paddingBottom={2}>\r\n//               <Field\r\n//                 fullWidth\r\n//                 name=\"permanentAddress\"\r\n//                 component={TextField}\r\n//                 label=\"Permanent Address\"\r\n//               />\r\n//             </Box>\r\n//           </FormikStep>\r\n//         </FormikStepper>\r\n//       </CardContent>\r\n//     </Card>\r\n//   );\r\n// }\r\n\r\n// // export interface FormikStepProps\r\n// //   extends Pick<FormikConfig<FormikValues>, 'children' | 'validationSchema'> {\r\n// //   label: string;\r\n// // }\r\n\r\n// export function FormikStep({ children }) {\r\n//   return <>{children}</>;\r\n// }\r\n\r\n// export function FormikStepper({ children, ...props }) {\r\n//   // console.log(\"ch\",children,\"pr\",props);\r\n//   const childrenArray = React.Children.toArray(children);\r\n//   // console.log(\"arr\",childrenArray );\r\n\r\n//   const [step, setStep] = useState(0);\r\n//   const currentChild = childrenArray[step];\r\n//   const [completed, setCompleted] = useState(false);\r\n\r\n//   function isLastStep() {\r\n//     return step === childrenArray.length - 1;\r\n//   }\r\n\r\n//   return (\r\n//     <Formik\r\n//       {...props}\r\n//       validationSchema={currentChild.props.validationSchema}\r\n//       onSubmit={async (values, helpers) => {\r\n//         if (isLastStep()) {\r\n//           await props.onSubmit(values, helpers);\r\n//           setCompleted(true);\r\n//         } else {\r\n//           setStep((s) => s + 1);\r\n\r\n//           // the next line was not covered in the youtube video\r\n//           //\r\n//           // If you have multiple fields on the same step\r\n//           // we will see they show the validation error all at the same time after the first step!\r\n//           //\r\n//           // If you want to keep that behaviour, then, comment the next line :)\r\n//           // If you want the second/third/fourth/etc steps with the same behaviour\r\n//           //    as the first step regarding validation errors, then the next line is for you! =)\r\n//           //\r\n//           // In the example of the video, it doesn't make any difference, because we only\r\n//           //    have one field with validation in the second step :)\r\n//           helpers.setTouched({});\r\n//         }\r\n//       }}\r\n//     >\r\n//       {({ isSubmitting }) => (\r\n//         <>\r\n//           {/* <Design\r\n//                 text=\"Student Admission Forms\"\r\n//                 dashText=\"Student Admission Form\"\r\n//               /> */}\r\n//           <Grid\r\n//             style={{ paddingBottom: \"10px\", marginTop: 5 }}\r\n//             container\r\n//             justifyContent=\"center\"\r\n//             spacing={3}\r\n//           >\r\n//             <Typography color=\"textPrimary\" variant=\"h5\">\r\n//               Staff Registration Forms\r\n//             </Typography>\r\n//           </Grid>\r\n//           <Form autoComplete=\"off\">\r\n//             <Stepper alternativeLabel activeStep={step}>\r\n//               {childrenArray.map((child, index) => (\r\n//                 <Step\r\n//                   key={child.props.label}\r\n//                   completed={step > index || completed}\r\n//                 >\r\n//                   <StepLabel>{child.props.label}</StepLabel>\r\n//                 </Step>\r\n//               ))}\r\n//             </Stepper>\r\n//             <div style={{ marginTop: 10 }}>{currentChild}</div>\r\n\r\n//             <Grid\r\n//               sx={{\r\n//                 // display: \"flex\",\r\n//                 // alignItems: \"center\",\r\n//                 // justifyContent: \"flex-end\",\r\n//                 mt: 2,\r\n//               }}\r\n//               container\r\n//               spacing={2}\r\n//             >\r\n//               {step > 0 ? (\r\n//                 <Grid item>\r\n//                   <Button\r\n//                     disabled={isSubmitting}\r\n//                     variant=\"contained\"\r\n//                     color=\"primary\"\r\n//                     onClick={() => setStep((s) => s - 1)}\r\n//                   >\r\n//                     Back\r\n//                   </Button>\r\n//                 </Grid>\r\n//               ) : null}\r\n//               <Grid item>\r\n//                 <Button\r\n//                   startIcon={\r\n//                     isSubmitting ? <CircularProgress size=\"1rem\" /> : null\r\n//                   }\r\n//                   disabled={isSubmitting}\r\n//                   variant=\"contained\"\r\n//                   color=\"primary\"\r\n//                   type=\"submit\"\r\n//                 >\r\n//                   {isSubmitting\r\n//                     ? \"Submitting\"\r\n//                     : isLastStep()\r\n//                     ? \"Submit\"\r\n//                     : \"Next\"}\r\n//                 </Button>\r\n//               </Grid>\r\n//             </Grid>\r\n//           </Form>\r\n//         </>\r\n//       )}\r\n//     </Formik>\r\n//   );\r\n// }\r\n\r\n// import React from \"react\";\r\n// import * as Yup from \"yup\";\r\n// import axios from \"axios\";\r\n// import { makeStyles } from \"@material-ui/core/styles\";\r\n// import TextField from \"@material-ui/core/TextField\";\r\n// import {\r\n//   Box,\r\n//   Card,\r\n//   FormControl,\r\n//   InputLabel,\r\n//   MenuItem,\r\n//   Select,\r\n//   Typography,\r\n// } from \"@material-ui/core\";\r\n// import { useLocation, useNavigate } from \"react-router-dom\";\r\n// import { Field, Form, Formik } from \"formik\";\r\n// import { useEffect, useState } from \"react\";\r\n// import Save from \"./Buttons/Save\";\r\n// import ResetButton from \"./Buttons/ResetButton\";\r\n// import Input from \"./InputFeild/Input\";\r\n// import Design from \"./Design\";\r\n// import toast from \"react-hot-toast\";\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n//   root: {\r\n//     \"& > *\": {\r\n//       margin: theme.spacing(1),\r\n//       width: \"25ch\",\r\n//       margin: \"17px\",\r\n//     },\r\n//   },\r\n\r\n//   head: {\r\n//     height: \"130vh\",\r\n//     paddingLeft: 30,\r\n//     paddingRight: 30,\r\n//     paddingTop: 10,\r\n//     background: \"none\",\r\n//   },\r\n//   highlight:\r\n//     theme.palette.type === \"light\"\r\n//       ? {\r\n//           color: theme.palette.secondary.main,\r\n//           padding: \"17px\",\r\n//         }\r\n//       : {\r\n//           color: theme.palette.text.primary,\r\n//           padding: \"17px\",\r\n//         },\r\n// }));\r\n// const Genders = [\r\n//   {\r\n//     label: \"male\",\r\n//     value: \"0\",\r\n//   },\r\n//   {\r\n//     label: \"Female\",\r\n//     value: \"1\",\r\n//   },\r\n//   {\r\n//     label: \"Other\",\r\n//     value: \"2\",\r\n//   },\r\n// ];\r\n\r\n// const religions = [\r\n//   {\r\n//     value: \"0\",\r\n//     label: \"Islam\",\r\n//   },\r\n//   {\r\n//     value: \"1\",\r\n//     label: \"Hindu\",\r\n//   },\r\n//   {\r\n//     value: \"2\",\r\n//     label: \"Cristion\",\r\n//   },\r\n// ];\r\n\r\n// export default function studendAdmission() {\r\n//   const navigate = useNavigate();\r\n//   const { state } = useLocation();\r\n//   // console.log(state);\r\n//   if (state === null) {\r\n//     var row = {\r\n//       name: \"\",\r\n//       lname: \"\",\r\n//       fname: \"\",\r\n//       faccupation: \"\",\r\n//       gender: \"\",\r\n//       dob: \"\",\r\n//       rollno: \"\",\r\n//       sectionid: \"\",\r\n//       religion: \"\",\r\n//       addid: \"\",\r\n//       admissiondate: \"\",\r\n//       classid: \"\",\r\n//       address: \"\",\r\n//       email: \"\",\r\n//       fname: \"\",\r\n//       phone: \"\",\r\n//       Balance: \"\",\r\n//     };\r\n//   } else {\r\n//     state.row;\r\n//     var { row } = state;\r\n//   }\r\n//   const classes = useStyles();\r\n//   const [classObj, setClassObj] = useState([]);\r\n//   const [sectionobj, setSection] = useState([]);\r\n\r\n//   const classData = async () => {\r\n//     const classData = await axios.get(\"http://localhost:8000/class/api\");\r\n//     setClassObj(classData.data);\r\n//   };\r\n\r\n//   const section_api = async () => {\r\n//     const sectionData = await axios.get(\r\n//       \"http://localhost:8000/class/api/section\"\r\n//     );\r\n//     // console.log(sectionData.data)\r\n//     setSection(sectionData.data);\r\n//   };\r\n//   useEffect(() => {\r\n//     classData();\r\n\r\n//     section_api();\r\n//   }, []);\r\n//   return (\r\n//     <>\r\n//       <Card className={classes.head}>\r\n//         <FormikStepper\r\n//           enableReinitialize\r\n//           initialValues={{\r\n//             name: row.name || \"\",\r\n//             lname: row.lname || \"\",\r\n//             fname: row.fname || \"\",\r\n//             faccupation: row.faccupation || \"\",\r\n//             gender: row.gender || \"\",\r\n//             dob: row.dob || \"\",\r\n//             rollno: row.rollno || \"\",\r\n//             sectionid: row.sectionid || \"\",\r\n//             religion: row.religion || \"\",\r\n//             addid: row.addid || \"\",\r\n//             phone: row.phone || \"\",\r\n//             email: row.email || \"\",\r\n//             address: row.address || \"\",\r\n//             admissiondate: row.admissiondate || new Date(),\r\n//             classid: row.classid || \"\",\r\n//             Balance: row.Balance || \"\",\r\n\r\n//             // submit: null,\r\n//           }}\r\n//           validationSchema={Yup.object().shape({\r\n//             name: Yup.string().required(\"Name is Required\"),\r\n//             Balance: Yup.number().required(\"Please Enter Some Amuont\"),\r\n//           })}\r\n//           onSubmit={async (data) => {\r\n//             // await new Promise((r) => setTimeout(r, 500));\r\n//             // alert(JSON.stringify(data, null, 2));\r\n//             // try {\r\n//               // const data = { ...data, id: row.id ? row.id : \"\" };\r\n//               // console.log(\"data\",data);\r\n\r\n//             //   await axios\r\n//             //     .post(\"http://localhost:8000/list/addupdate\", { ...data })\r\n//             //     .then((res) => {\r\n//             //       res.json;\r\n//             //     });\r\n//             //   // .catch((error) => {\r\n//             //   //   console.log(error);\r\n//             //   // });\r\n//             //   toast.success(row.id ? \" Update Data \" : \"Add SuccessFully\");\r\n//             //   navigate(\"../all-students\");\r\n//             // } catch (err) {\r\n//             //   console.log(err);\r\n//             // }\r\n//           }}\r\n//         >\r\n//           {({\r\n//             errors,\r\n//             handleBlur,\r\n//             handleChange,\r\n//             handleSubmit,\r\n//             isSubmitting,\r\n//             touched,\r\n//             data,\r\n//             handleReset,\r\n//             dirty,\r\n//           }) => (\r\n//             <div>\r\n//               <Design\r\n//                 text=\"Student Admission Forms\"\r\n//                 dashText=\"Student Admission Form\"\r\n//               />\r\n\r\n//               <Form noValidate onSubmit={handleSubmit}>\r\n//                 <Box style={{ paddingLeft: 20 }} boxShadow={20} color=\"black\">\r\n//                   <div className={classes.highlight}>\r\n//                     <Typography variant=\"h4\">\r\n//                       <strong>Add New Student</strong>\r\n//                     </Typography>\r\n//                   </div>\r\n//                   <div className={classes.root}>\r\n//                     <Box>\r\n//                       <Field\r\n//                         fullWidth\r\n//                         name=\"money\"\r\n//                         type=\"number\"\r\n//                         component={TextField}\r\n//                         label=\"All the money I have\"\r\n//                       />\r\n//                     </Box>\r\n//                     <Input\r\n//                       autoFocus\r\n//                       error={Boolean(touched.name && errors.name)}\r\n//                       helperText={touched.name && errors.name}\r\n//                       onBlur={handleBlur}\r\n//                       id=\"name\"\r\n//                       label=\"Name\"\r\n//                       variant=\"outlined\"\r\n//                       value={data.name}\r\n//                       onChange={handleChange}\r\n//                     />\r\n//                     <Input\r\n//                       error={Boolean(touched.lname && errors.lname)}\r\n//                       helperText={touched.lname && errors.lname}\r\n//                       id=\"lname\"\r\n//                       label=\"Last-Name\"\r\n//                       variant=\"outlined\"\r\n//                       value={data.lname}\r\n//                       onBlur={handleBlur}\r\n//                       onChange={handleChange}\r\n//                     />\r\n\r\n//                     <FormControl>\r\n//                       <InputLabel id=\"gender\">Gender</InputLabel>\r\n\r\n//                       <Select\r\n//                         // fullWidth\r\n//                         labelId=\"gender\"\r\n//                         value={data.gender}\r\n//                         onChange={handleChange}\r\n//                         id=\"gender\"\r\n//                         label=\"Gender\"\r\n//                         name=\"gender\"\r\n//                       >\r\n//                         {Genders.map((option) => (\r\n//                           <MenuItem key={option.value} value={option.label}>\r\n//                             {option.label}\r\n//                           </MenuItem>\r\n//                         ))}\r\n//                       </Select>\r\n//                     </FormControl>\r\n//                     <TextField\r\n//                       error={Boolean(touched.date && errors.date)}\r\n//                       helperText={touched.date && errors.date}\r\n//                       id=\"dob\"\r\n//                       // label=\"Date of Birth\"\r\n//                       value={data.dob}\r\n//                       type=\"date\"\r\n//                       onBlur={handleBlur}\r\n//                       onChange={handleChange}\r\n//                       variant=\"outlined\"\r\n//                     />\r\n//                     <Input\r\n//                       id=\"rollno\"\r\n//                       label=\"Roll No\"\r\n//                       variant=\"outlined\"\r\n//                       error={Boolean(touched.rollno && errors.rollno)}\r\n//                       helperText={touched.rollno && errors.rollno}\r\n//                       value={data.rollno}\r\n//                       onBlur={handleBlur}\r\n//                       onChange={handleChange}\r\n//                     />\r\n//                     <FormControl>\r\n//                       <InputLabel id=\"clas\">Classes</InputLabel>\r\n\r\n//                       <Select\r\n//                         // fullWidth\r\n//                         labelId=\"classid\"\r\n//                         value={data.classid}\r\n//                         onChange={handleChange}\r\n//                         id=\"classid\"\r\n//                         label=\"Classes\"\r\n//                         name=\"classid\"\r\n//                       >\r\n//                         {classObj.map((option) => (\r\n//                           <MenuItem key={option.id} value={option.id}>\r\n//                             {option.className}\r\n//                           </MenuItem>\r\n//                         ))}\r\n//                       </Select>\r\n//                     </FormControl>\r\n//                     <FormControl>\r\n//                       <InputLabel id=\"sectionid\">Section</InputLabel>\r\n\r\n//                       <Select\r\n//                         // fullWidth\r\n//                         labelId=\"sectionid\"\r\n//                         value={data.sectionid}\r\n//                         onChange={handleChange}\r\n//                         id=\"sectionid\"\r\n//                         label=\"Section\"\r\n//                         name=\"sectionid\"\r\n//                       >\r\n//                         {sectionobj.map((option) => (\r\n//                           <MenuItem key={option.id} value={option.id}>\r\n//                             {option.name}\r\n//                           </MenuItem>\r\n//                         ))}\r\n//                       </Select>\r\n//                     </FormControl>\r\n//                     <FormControl>\r\n//                       <InputLabel id=\"religion\">Religion</InputLabel>\r\n\r\n//                       <Select\r\n//                         // fullWidth\r\n//                         labelId=\"religion\"\r\n//                         value={data.religion}\r\n//                         onChange={handleChange}\r\n//                         id=\"religion\"\r\n//                         label=\"Religion\"\r\n//                         name=\"religion\"\r\n//                       >\r\n//                         {religions.map((option) => (\r\n//                           <MenuItem key={option.value} value={option.label}>\r\n//                             {option.label}\r\n//                           </MenuItem>\r\n//                         ))}\r\n//                       </Select>\r\n//                     </FormControl>\r\n//                     <Input\r\n//                       error={Boolean(touched.addid && errors.addid)}\r\n//                       helperText={touched.addid && errors.addid}\r\n//                       id=\"addid\"\r\n//                       label=\"Addmision Id\"\r\n//                       variant=\"outlined\"\r\n//                       value={data.addid}\r\n//                       onBlur={handleBlur}\r\n//                       onChange={handleChange}\r\n//                     />\r\n//                     <TextField\r\n//                       error={Boolean(\r\n//                         touched.admissiondate && errors.admissiondate\r\n//                       )}\r\n//                       helperText={touched.admissiondate && errors.admissiondate}\r\n//                       id=\"admissiondate\"\r\n//                       label=\"Addmission Date\"\r\n//                       type=\"date\"\r\n//                       value={data.admissiondate}\r\n//                       onChange={handleChange}\r\n//                       variant=\"outlined\"\r\n//                     />\r\n//                     <Input\r\n//                       error={Boolean(touched.phone && errors.phone)}\r\n//                       helperText={touched.phone && errors.phone}\r\n//                       id=\"phone\"\r\n//                       label=\"Phone\"\r\n//                       variant=\"outlined\"\r\n//                       type=\"number\"\r\n//                       onBlur={handleBlur}\r\n//                       onChange={handleChange}\r\n//                       value={data.phone}\r\n//                     />\r\n//                     <Input\r\n//                       error={Boolean(touched.email && errors.email)}\r\n//                       fullWidth\r\n//                       helperText={touched.email && errors.email}\r\n//                       label=\"Email Address\"\r\n//                       margin=\"normal\"\r\n//                       id=\"email\"\r\n//                       name=\"email\"\r\n//                       onBlur={handleBlur}\r\n//                       onChange={handleChange}\r\n//                       type=\"email\"\r\n//                       value={data.email}\r\n//                       variant=\"outlined\"\r\n//                     />\r\n//                     <Input\r\n//                       error={Boolean(touched.address && errors.address)}\r\n//                       helperText={touched.address && errors.address}\r\n//                       id=\"address\"\r\n//                       label=\"Address\"\r\n//                       size=\"medium\"\r\n//                       variant=\"outlined\"\r\n//                       value={data.address}\r\n//                       onBlur={handleBlur}\r\n//                       onChange={handleChange}\r\n//                     />\r\n\r\n//                     <Input\r\n//                       error={Boolean(touched.Balance && errors.Balance)}\r\n//                       helperText={touched.Balance && errors.Balance}\r\n//                       onBlur={handleBlur}\r\n//                       id=\"Balance\"\r\n//                       label=\"Addmission Fee\"\r\n//                       variant=\"outlined\"\r\n//                       type=\"number\"\r\n//                       value={data.Balance}\r\n//                       onChange={handleChange}\r\n//                     />\r\n//                   </div>\r\n//                   <div>\r\n//                     <Input\r\n//                       error={Boolean(touched.fname && errors.fname)}\r\n//                       helperText={touched.fname && errors.fname}\r\n//                       id=\"fname\"\r\n//                       label=\"Father-Name\"\r\n//                       variant=\"outlined\"\r\n//                       value={data.fname}\r\n//                       onBlur={handleBlur}\r\n//                       onChange={handleChange}\r\n//                     />\r\n//                     <Input\r\n//                       error={Boolean(touched.faccupation && errors.faccupation)}\r\n//                       helperText={touched.faccupation && errors.faccupation}\r\n//                       id=\"faccupation\"\r\n//                       label=\"Father Accupation\"\r\n//                       value={data.faccupation}\r\n//                       variant=\"outlined\"\r\n//                       onBlur={handleBlur}\r\n//                       onChange={handleChange}\r\n//                     />\r\n//                   </div>\r\n//                   <Save\r\n//                     text={row.id ? \"update Student\" : \"Add Student \"}\r\n//                     variant=\"contained\"\r\n//                     size=\"medium\"\r\n//                     color=\"success\"\r\n//                     // disableElevation\r\n//                     type=\"submit\"\r\n//                     disabled={isSubmitting}\r\n//                   />\r\n//                   <ResetButton\r\n//                     text=\"Reset\"\r\n//                     variant=\"contained\"\r\n//                     size=\"medium\"\r\n//                     color=\"primary\"\r\n//                     onClick={handleReset}\r\n//                     disabled={!dirty || isSubmitting}\r\n//                   />\r\n//                 </Box>\r\n//               </Form>\r\n//             </div>\r\n//           )}\r\n//         </FormikStepper>\r\n//         <Typography style={{ marginTop: 20 }}>\r\n//           © Copyrights <b>akkhor</b> 2019. All rights reserved. Designed by\r\n//           PsdBosS\r\n//         </Typography>\r\n//       </Card>\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// export function FormikStepper({ children, ...props }) {\r\n//   console.log(children, );\r\n//   return (\r\n//     <Formik {...props}>\r\n//       <Form autoComplete=\"off\">{children}</Form>\r\n//     </Formik>\r\n//   );\r\n// }\r\n\r\n// const religions = [\r\n//   {\r\n//     value: \"0\",\r\n//     label: \"Islam\",\r\n//   },\r\n//   {\r\n//     value: \"1\",\r\n//     label: \"Hindu\",\r\n//   },\r\n//   {\r\n//     value: \"2\",\r\n//     label: \"Cristion\",\r\n//   },\r\n// ];\r\n// const Genders = [\r\n//   {\r\n//     label: \"male\",\r\n//     value: \"0\",\r\n//   },\r\n//   {\r\n//     label: \"Female\",\r\n//     value: \"1\",\r\n//   },\r\n//   {\r\n//     label: \"Other\",\r\n//     value: \"2\",\r\n//   },\r\n// ];\r\n// import {\r\n//   Box,\r\n//   Button,\r\n//   Card,\r\n//   CardContent,\r\n//   CircularProgress,\r\n//   FormControl,\r\n//   FormControlLabel,\r\n//   FormLabel,\r\n//   Grid,\r\n//   MenuItem,\r\n//   Radio,\r\n//   Stack,\r\n//   Step,\r\n//   StepLabel,\r\n//   Stepper,\r\n//   Typography,\r\n// } from \"@material-ui/core\";\r\n// import { Field, Form, Formik } from \"formik\";\r\n// import {\r\n//   RadioGroup,\r\n//   Select,\r\n//   SimpleFileUpload,\r\n//   TextField,\r\n// } from \"formik-material-ui\";\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { mixed, number, string, object } from \"yup\";\r\n// import { useLocation, useNavigate } from \"react-router-dom\";\r\n// import toast from \"react-hot-toast\";\r\n// import { customAxios } from \"./apis/Axios\";\r\n// import { Section } from \"./HelperFunction\";\r\n// const sleep = (time) => new Promise((acc) => setTimeout(acc, time));\r\n\r\n// export default function Home() {\r\n//   const [sectionobj, setSection] = useState([]);\r\n//   const [classObj, setClassObj] = useState([]);\r\n//   const { state } = useLocation();\r\n//   const Navigate = useNavigate();\r\n//   console.log(state);\r\n\r\n//   if (state === null) {\r\n//     var row = {\r\n//       Balance: \"\",\r\n//       F_phone: \"\",\r\n//       FatherMonthly_income: \"\",\r\n//       Relation_with_father: \"\",\r\n//       addid: \"\",\r\n//       address1: \"\",\r\n//       address2: \"\",\r\n//       admissiondate: \"\",\r\n//       class: \"\",\r\n//       classid: \"\",\r\n//       dob: \"\",\r\n//       email: \"\",\r\n//       f_Email: \"\",\r\n//       faccupation: \"\",\r\n//       father_CNIC: \"\",\r\n//       fdesignation: \"\",\r\n//       fname: \"\",\r\n//       gender: \"\",\r\n//       id: \"\",\r\n//       name: \"\",\r\n//       permanent_adress: \"\",\r\n//       phone: \"\",\r\n//       religion: \"\",\r\n//       rollno: \"\",\r\n//       section: \"\",\r\n//       sectionid: \"\",\r\n//       studentCNIC: \"\",\r\n//       zipcode: \"\",\r\n//     };\r\n//   } else {\r\n//     state.row;\r\n//     var { row } = state;\r\n//   }\r\n\r\n//   useEffect(() => {\r\n//     const fun = Section(\"class/api\");\r\n//     fun.then((res) => {\r\n//       setClassObj(res);\r\n//     });\r\n//     const fun1 = Section(\"class/api/section\");\r\n//     fun1.then((res) => {\r\n//       setSection(res);\r\n//     });\r\n//   }, []);\r\n//   const Relation = [\r\n//     { label: \"Father\", value: \"father\" },\r\n//     { label: \"Mother\", value: \"mother\" },\r\n//     { label: \"Other\", value: \"other\" },\r\n//   ];\r\n//   return (\r\n//     <Card>\r\n//       <CardContent>\r\n//         <FormikStepper\r\n//           initialValues={{\r\n//             firstName: row.name || \"\",\r\n//             gender: row.gender || \"\",\r\n//             rollno: row.rollno || \"\",\r\n//             dob: row.dob || \"\",\r\n//             email: row.email || \"\",\r\n//             admissiondate: row.admissiondate || \"\",\r\n//             phone: row.phone || \"\",\r\n//             studentCNIC: row.studentCNIC || \"\",\r\n//             religion: row.religion || \"\",\r\n//             classid: row.classid || \"\",\r\n//             sectionid: row.sectionid || \"\",\r\n//             relation: row.Relation_with_father || \"\",\r\n//             fname: row.fname || \"\",\r\n//             fatherCNIC: row.father_CNIC || \"\",\r\n//             fatherPhoneNumer: row.F_phone || \"\",\r\n//             foccupation: row.faccupation || \"\",\r\n//             f_Email: row.f_Email || \"\",\r\n//             designation: row.fdesignation || \"\",\r\n//             monthlyIncome: row.FatherMonthly_income || \"\",\r\n//             address1: row.address1 || \"\",\r\n//             address2: row.address2 || \"\",\r\n//             zipcode: row.zipcode || \"\",\r\n//             permanentAddress: row.permanent_adress || \"\",\r\n//             balance: row.Balance || \"\",\r\n//             discount: row.discount || \"\",\r\n//             photo: row.student_image || \"\",\r\n//             submit: null,\r\n//           }}\r\n//           onSubmit={async (data) => {\r\n//             await sleep(3000);\r\n\r\n//             // return console.log(data)\r\n//             let formData = new FormData();\r\n//             formData.append(\"firstName\", data.firstName);\r\n//             formData.append(\"gender\", data.gender);\r\n//             formData.append(\"rollno\", data.rollno);\r\n//             formData.append(\"dob\", data.dob);\r\n//             formData.append(\"email\", data.email);\r\n//             formData.append(\"admissiondate\", data.admissiondate);\r\n//             formData.append(\"phone\", data.phone);\r\n//             formData.append(\"studentCNIC\", data.studentCNIC);\r\n//             formData.append(\"religion\", data.religion);\r\n//             formData.append(\"classid\", data.classid);\r\n//             formData.append(\"sectionid\", data.sectionid);\r\n//             formData.append(\"relation\", data.relation);\r\n//             formData.append(\"fname\", data.fname);\r\n//             formData.append(\"fatherCNIC\", data.fatherCNIC);\r\n//             formData.append(\"fatherPhoneNumer\", data.fatherPhoneNumer);\r\n//             formData.append(\"foccupation\", data.foccupation);\r\n//             formData.append(\"f_Email\", data.f_Email);\r\n//             formData.append(\"designation\", data.designation);\r\n//             formData.append(\"monthlyIncome\", data.monthlyIncome);\r\n//             formData.append(\"address1\", data.address1);\r\n//             formData.append(\"address2\", data.address2);\r\n//             formData.append(\"zipcode\", data.zipcode);\r\n//             formData.append(\"permanentAddress\", data.permanentAddress);\r\n//             formData.append(\"balance\", data.balance);\r\n//             formData.append(\"discount\", data.discount);\r\n//             formData.append(\"photo\", data.photo);\r\n//             console.log(formData);\r\n//             const data = { ...data, id: row.id ? row.id : \"\" };\r\n//             console.log(\"data\", data.photo);\r\n//             // return;\r\n//             try {\r\n//               await customAxios\r\n//                 .postCall(\"list/addupdate\", formData, {\r\n//                   headers: {\r\n//                     \"Content-Type\": \"multipart/form-data\",\r\n//                   },\r\n//                 })\r\n//                 .then((res) => {\r\n//                   res.json;\r\n//                 });\r\n//               toast.success(row.id ? \" Update Data \" : \"Add SuccessFully\");\r\n\r\n//               // Navigate(\"../all-students\");\r\n//             } catch (err) {\r\n//               console.log(err);\r\n//             }\r\n//           }}\r\n//         >\r\n//           <FormikStep\r\n//             label=\"Basic Information\"\r\n//             validationSchema={object({\r\n//               firstName: string().required(\"Enter Your First Name\"),\r\n\r\n//               gender: string().nullable().required(),\r\n//               email: string()\r\n//                 .email(\"Must be a valid email\")\r\n//                 .max(255)\r\n//                 .required(\"Email is required\"),\r\n//               studentCNIC: number().required(\"Father CNIC Require Please\"),\r\n//             })}\r\n//           >\r\n//             <Box paddingBottom={2}>\r\n//               <Field\r\n//                 fullWidth\r\n//                 name=\"firstName\"\r\n//                 component={TextField}\r\n//                 label=\"First Name\"\r\n//               />\r\n//             </Box>\r\n//             <Box>\r\n//               <FormControl fullWidth>\r\n//                 <Field\r\n//                   fullWidth\r\n//                   component={Select}\r\n//                   id=\"gender\"\r\n//                   name=\"gender\"\r\n//                   labelId=\"gender-simple\"\r\n//                   label=\"Gender\"\r\n//                 >\r\n//                   {Genders.map((option) => (\r\n//                     <MenuItem key={option.value} value={option.label}>\r\n//                       {option.label}\r\n//                     </MenuItem>\r\n//                   ))}\r\n//                 </Field>\r\n//               </FormControl>{\" \"}\r\n//             </Box>\r\n//             <Box paddingBottom={2} paddingTop={2}>\r\n//               <Field\r\n//                 fullWidth\r\n//                 name=\"rollno\"\r\n//                 component={TextField}\r\n//                 label=\"Roll No\"\r\n//                 type=\"number\"\r\n//               />\r\n//             </Box>\r\n//             <Box paddingBottom={2}>\r\n//               <Field\r\n//                 fullWidth\r\n//                 component={TextField}\r\n//                 type=\"date\"\r\n//                 // label=\"label\"\r\n//                 formHelperText={{ children: \"Date Of Birth\" }}\r\n//                 name=\"dob\"\r\n//                 textField={{ helperText: \"Helper text\" }}\r\n//                 inputFormat=\"MM/dd/yyyy\"\r\n//               />\r\n//             </Box>\r\n//             <Field\r\n//               fullWidth\r\n//               component={TextField}\r\n//               type=\"date\"\r\n//               // label=\"label\"\r\n//               name=\"admissiondate\"\r\n//               textField={{ helperText: \"Helper text\" }}\r\n//               inputFormat=\"MM/dd/yyyy\"\r\n//             />\r\n//             {/* <Box paddingBottom={2}>\r\n//               <Field\r\n//                 fullWidth\r\n//                 name=\"address\"\r\n//                 component={TextField}\r\n//                 label=\"Address\"\r\n//               />\r\n//             </Box>\r\n//             <Box paddingBottom={2}>\r\n//               <Field\r\n//                 fullWidth\r\n//                 name=\"email\"\r\n//                 component={TextField}\r\n//                 label=\"E-mail\"\r\n//               />\r\n//             </Box> */}\r\n//             <Box paddingBottom={2} paddingTop={2}>\r\n//               <Field\r\n//                 fullWidth\r\n//                 name=\"phone\"\r\n//                 component={TextField}\r\n//                 label=\"Phone Number \"\r\n//                 type=\"number\"\r\n//               />\r\n//             </Box>\r\n//             <Box paddingBottom={2}>\r\n//               <Field\r\n//                 fullWidth\r\n//                 name=\"studentCNIC\"\r\n//                 component={TextField}\r\n//                 label=\"Student's Form B/CNIC No\"\r\n//                 type=\"number\"\r\n//               />\r\n//             </Box>{\" \"}\r\n//             <Box paddingBottom={2}>\r\n//               <Field\r\n//                 fullWidth\r\n//                 name=\"email\"\r\n//                 component={TextField}\r\n//                 label=\"Student's Email\"\r\n//                 type=\"email\"\r\n//               />\r\n//             </Box>\r\n//             <Box>\r\n//               <FormControl fullWidth>\r\n//                 <Field\r\n//                   fullWidth\r\n//                   component={Select}\r\n//                   id=\"religion\"\r\n//                   name=\"religion\"\r\n//                   labelId=\"religion-simple\"\r\n//                   label=\"Religion\"\r\n//                 >\r\n//                   {religions.map((option) => (\r\n//                     <MenuItem key={option.value} value={option.label}>\r\n//                       {option.label}\r\n//                     </MenuItem>\r\n//                   ))}\r\n//                 </Field>\r\n//               </FormControl>{\" \"}\r\n//             </Box>\r\n//             <Box>\r\n//               <FormControl sx={{ mt: 2 }} fullWidth>\r\n//                 <Field\r\n//                   fullWidth\r\n//                   component={Select}\r\n//                   // formControl={{ sx}}\r\n//                   id=\"classid\"\r\n//                   name=\"classid\"\r\n//                   labelId=\"classid-simple\"\r\n//                   label=\"Class/Department\"\r\n//                 >\r\n//                   {classObj.map((option) => (\r\n//                     <MenuItem key={option.value} value={option.id}>\r\n//                       {option.className}\r\n//                     </MenuItem>\r\n//                   ))}\r\n//                 </Field>\r\n//               </FormControl>\r\n//             </Box>\r\n//             <FormControl sx={{ mt: 2 }} fullWidth>\r\n//               <Field\r\n//                 fullWidth\r\n//                 component={Select}\r\n//                 // formControl={{ sx}}\r\n//                 id=\"sectionid\"\r\n//                 name=\"sectionid\"\r\n//                 labelId=\"sectionid-simple\"\r\n//                 label=\"Section\"\r\n//               >\r\n//                 {sectionobj.map((option) => (\r\n//                   <MenuItem key={option.value} value={option.id}>\r\n//                     {option.name}\r\n//                   </MenuItem>\r\n//                 ))}\r\n//               </Field>\r\n//             </FormControl>{\" \"}\r\n//           </FormikStep>\r\n//           <FormikStep\r\n//             label=\"Father's/Guardians\"\r\n//             validationSchema={object({\r\n//               // money: mixed().when(\"millionaire\", {\r\n//               //   is: true,\r\n//               //   then: number()\r\n//               //     .required()\r\n//               //     .min(\r\n//               //       1_000_000,\r\n//               //       \"Because you said you are a millionaire you need to have 1 million\"\r\n//               //     ),\r\n//               //   otherwise: number().required(),\r\n//               // }),\r\n//               fatherPhoneNumer: number().required(\"Please Enter Phone Number\"),\r\n//             })}\r\n//           >\r\n//             <Box paddingBottom={2}>\r\n//               <FormControl sx={{ mt: 2, mb: 2 }} fullWidth>\r\n//                 <Field\r\n//                   fullWidth\r\n//                   component={Select}\r\n//                   // formControl={{ sx}}\r\n//                   id=\"relation\"\r\n//                   name=\"relation\"\r\n//                   labelId=\"relation-simple\"\r\n//                   label=\"Relation\"\r\n//                 >\r\n//                   {Relation.map((option) => (\r\n//                     <MenuItem key={option.value} value={option.label}>\r\n//                       {option.label}\r\n//                     </MenuItem>\r\n//                   ))}\r\n//                 </Field>\r\n//               </FormControl>{\" \"}\r\n//               <Box paddingBottom={2}>\r\n//                 <Field\r\n//                   fullWidth\r\n//                   name=\"fname\"\r\n//                   component={TextField}\r\n//                   label=\"Father Name\"\r\n//                 />\r\n//               </Box>\r\n//               <Box paddingBottom={2}>\r\n//                 <Field\r\n//                   fullWidth\r\n//                   name=\"fatherCNIC\"\r\n//                   component={TextField}\r\n//                   label=\"Father CNIC\"\r\n//                   type=\"number\"\r\n//                 />\r\n//               </Box>\r\n//               <Box paddingBottom={2}>\r\n//                 <Field\r\n//                   fullWidth\r\n//                   name=\"fatherPhoneNumer\"\r\n//                   component={TextField}\r\n//                   label=\"Mobile Number\"\r\n//                   type=\"number\"\r\n//                 />\r\n//               </Box>\r\n//               <Box paddingBottom={2}>\r\n//                 <Field\r\n//                   fullWidth\r\n//                   name=\"f_Email\"\r\n//                   component={TextField}\r\n//                   label=\"E-mail\"\r\n//                   type=\"email\"\r\n//                 />\r\n//               </Box>\r\n//               <Box paddingBottom={2}>\r\n//                 <Field\r\n//                   fullWidth\r\n//                   name=\"foccupation\"\r\n//                   component={TextField}\r\n//                   label=\"Father Accupation\"\r\n//                 />\r\n//               </Box>\r\n//               <Box paddingBottom={2}>\r\n//                 <Field\r\n//                   fullWidth\r\n//                   name=\"designation\"\r\n//                   component={TextField}\r\n//                   label=\"Designation\"\r\n//                 />\r\n//               </Box>\r\n//               <Box paddingBottom={2}>\r\n//                 <Field\r\n//                   fullWidth\r\n//                   name=\"monthlyIncome\"\r\n//                   component={TextField}\r\n//                   label=\"Monthly Income\"\r\n//                 />\r\n//               </Box>\r\n//             </Box>\r\n//           </FormikStep>\r\n//           <FormikStep label=\"Address\">\r\n//             <Box paddingBottom={2}>\r\n//               <Field\r\n//                 fullWidth\r\n//                 name=\"address1\"\r\n//                 component={TextField}\r\n//                 label=\"Address Line 1\"\r\n//               />\r\n//             </Box>\r\n//             <Box paddingBottom={2}>\r\n//               <Field\r\n//                 fullWidth\r\n//                 name=\"address2\"\r\n//                 component={TextField}\r\n//                 label=\"Address Line 2\"\r\n//               />\r\n//             </Box>\r\n//             <Box paddingBottom={2}>\r\n//               <Field\r\n//                 fullWidth\r\n//                 name=\"zipcode\"\r\n//                 component={TextField}\r\n//                 label=\"Zip Code\"\r\n//               />\r\n//             </Box>\r\n//             <Box paddingBottom={2}>\r\n//               <Field\r\n//                 fullWidth\r\n//                 name=\"permanentAddress\"\r\n//                 component={TextField}\r\n//                 label=\"Permanent Address\"\r\n//               />\r\n//             </Box>\r\n//           </FormikStep>\r\n//           <FormikStep label=\"Fee Deatil\">\r\n//             <Box paddingBottom={2}>\r\n//               <Field\r\n//                 fullWidth\r\n//                 name=\"balance\"\r\n//                 type=\"number\"\r\n//                 component={TextField}\r\n//                 label=\"Total fee\"\r\n//               />\r\n//             </Box>\r\n//             <Box paddingBottom={2}>\r\n//               <Field\r\n//                 fullWidth\r\n//                 name=\"discount\"\r\n//                 type=\"number\"\r\n//                 component={TextField}\r\n//                 label=\"Discount\"\r\n//               />\r\n//             </Box>\r\n//             <Box>\r\n//               <Field\r\n//                 component={SimpleFileUpload}\r\n//                 name=\"photo\"\r\n//                 type=\"file\"\r\n//                 label=\"Simple File Upload\"\r\n//               />\r\n//             </Box>\r\n//           </FormikStep>\r\n//         </FormikStepper>\r\n//       </CardContent>\r\n//     </Card>\r\n//   );\r\n// }\r\n\r\n// // export interface FormikStepProps\r\n// //   extends Pick<FormikConfig<FormikValues>, 'children' | 'validationSchema'> {\r\n// //   label: string;\r\n// // }\r\n\r\n// export function FormikStep({ children }) {\r\n//   return <>{children}</>;\r\n// }\r\n\r\n// export function FormikStepper({ children, ...props }) {\r\n//   // console.log(\"ch\",children,\"pr\",props);\r\n//   const childrenArray = React.Children.toArray(children);\r\n//   // console.log(\"arr\",childrenArray );\r\n\r\n//   const [step, setStep] = useState(0);\r\n//   const currentChild = childrenArray[step];\r\n//   const [completed, setCompleted] = useState(false);\r\n\r\n//   function isLastStep() {\r\n//     return step === childrenArray.length - 1;\r\n//   }\r\n\r\n//   return (\r\n//     <Formik\r\n//       {...props}\r\n//       validationSchema={currentChild.props.validationSchema}\r\n//       onSubmit={async (data, helpers) => {\r\n//         if (isLastStep()) {\r\n//           await props.onSubmit(data, helpers);\r\n//           setCompleted(true);\r\n//         } else {\r\n//           setStep((s) => s + 1);\r\n\r\n//           // the next line was not covered in the youtube video\r\n//           //\r\n//           // If you have multiple fields on the same step\r\n//           // we will see they show the validation error all at the same time after the first step!\r\n//           //\r\n//           // If you want to keep that behaviour, then, comment the next line :)\r\n//           // If you want the second/third/fourth/etc steps with the same behaviour\r\n//           //    as the first step regarding validation errors, then the next line is for you! =)\r\n//           //\r\n//           // In the example of the video, it doesn't make any difference, because we only\r\n//           //    have one field with validation in the second step :)\r\n//           helpers.setTouched({});\r\n//         }\r\n//       }}\r\n//     >\r\n//       {({ isSubmitting }) => (\r\n//         <>\r\n//           {/* <Design\r\n//                 text=\"Student Admission Forms\"\r\n//                 dashText=\"Student Admission Form\"\r\n//               /> */}\r\n//           <Grid\r\n//             style={{ paddingBottom: \"10px\", marginTop: 5 }}\r\n//             container\r\n//             justifyContent=\"center\"\r\n//             spacing={3}\r\n//           >\r\n//             <Typography color=\"textPrimary\" variant=\"h5\">\r\n//               Student Admission Forms\r\n//             </Typography>\r\n//           </Grid>\r\n//           <Form autoComplete=\"off\">\r\n//             <Stepper alternativeLabel activeStep={step}>\r\n//               {childrenArray.map((child, index) => (\r\n//                 <Step\r\n//                   key={child.props.label}\r\n//                   completed={step > index || completed}\r\n//                 >\r\n//                   <StepLabel>{child.props.label}</StepLabel>\r\n//                 </Step>\r\n//               ))}\r\n//             </Stepper>\r\n//             <div style={{ marginTop: 10 }}>{currentChild}</div>\r\n\r\n//             <Grid\r\n//               sx={{\r\n//                 // display: \"flex\",\r\n//                 // alignItems: \"center\",\r\n//                 // justifyContent: \"flex-end\",\r\n//                 mt: 2,\r\n//               }}\r\n//               container\r\n//               spacing={2}\r\n//             >\r\n//               {step > 0 ? (\r\n//                 <Grid item>\r\n//                   <Button\r\n//                     disabled={isSubmitting}\r\n//                     variant=\"contained\"\r\n//                     color=\"primary\"\r\n//                     onClick={() => setStep((s) => s - 1)}\r\n//                   >\r\n//                     Back\r\n//                   </Button>\r\n//                 </Grid>\r\n//               ) : null}\r\n//               <Grid item>\r\n//                 <Button\r\n//                   startIcon={\r\n//                     isSubmitting ? <CircularProgress size=\"1rem\" /> : null\r\n//                   }\r\n//                   disabled={isSubmitting}\r\n//                   variant=\"contained\"\r\n//                   color=\"primary\"\r\n//                   type=\"submit\"\r\n//                 >\r\n//                   {isSubmitting\r\n//                     ? \"Submitting\"\r\n//                     : isLastStep()\r\n//                     ? \"Submit\"\r\n//                     : \"Next\"}\r\n//                 </Button>\r\n//               </Grid>\r\n//             </Grid>\r\n//           </Form>\r\n//         </>\r\n//       )}\r\n//     </Formik>\r\n//   );\r\n// }\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  Stepper,\r\n  Step,\r\n  StepLabel,\r\n  Grid,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Input,\r\n  Card,\r\n  Box,\r\n  CardMedia,\r\n  CardContent,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  useForm,\r\n  Controller,\r\n  FormProvider,\r\n  useFormContext,\r\n} from \"react-hook-form\";\r\nimport { Section } from \"../HelperFunction\";\r\n\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport wait from \"../../utils/wait\";\r\nimport { customAxios } from \"../apis/Axios\";\r\nimport toast from \"react-hot-toast\";\r\nimport axios from \"axios\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nfunction getSteps() {\r\n  return [\r\n    \"Personal information\",\r\n    \"Parent Information\",\r\n    \"Address Detail\",\r\n    \"Document\",\r\n  ];\r\n}\r\nconst Relation = [\r\n  { label: \"Father\", value: \"father\" },\r\n  { label: \"Mother\", value: \"mother\" },\r\n  { label: \"Other\", value: \"other\" },\r\n];\r\nconst religions = [\r\n  {\r\n    value: \"0\",\r\n    label: \"Islam\",\r\n  },\r\n  {\r\n    value: \"1\",\r\n    label: \"Hindu\",\r\n  },\r\n  {\r\n    value: \"2\",\r\n    label: \"Cristion\",\r\n  },\r\n];\r\nconst Genders = [\r\n  {\r\n    label: \"male\",\r\n    value: \"0\",\r\n  },\r\n  {\r\n    label: \"Female\",\r\n    value: \"1\",\r\n  },\r\n  {\r\n    label: \"Other\",\r\n    value: \"2\",\r\n  },\r\n];\r\nconst Role = [\r\n  { label: \"Teacher\", value: \"1\" },\r\n  { label: \"Staff\", value: \"2\" },\r\n  { label: \"Accounts\", value: \"3\" },\r\n  { label: \"other's\", value: \"4\" },\r\n];\r\nconst MaritalStatus = [\r\n  { label: \"Single\", value: \"1\" },\r\n  { label: \"Married\", value: \"2\" },\r\n  { label: \"Widow\", value: \"3\" },\r\n  { label: \"Other\", value: \"4\" },\r\n];\r\nconst Contract = [\r\n  {\r\n    label: \"Permanent\",\r\n    value: \"1\",\r\n  },\r\n  { label: \"Temporory\", value: \"2\" },\r\n];\r\nconst StudentAdmissionForm = (props) => {\r\n  const [sectionobj, setSection] = useState([]);\r\n  const [classObj, setClassObj] = useState([]);\r\n  const { state } = useLocation();\r\n  const Navigate = useNavigate();\r\n  // const classData = async () => {\r\n  //   const classData = await axios.get(\"http://localhost:8000/class/api\");\r\n  //   setClassObj(classData.data);\r\n  // };\r\n  if (state === null) {\r\n    var row = {\r\n      id: \"\",\r\n      staffid: \"\",\r\n      role: \"\",\r\n      firstName: \"\",\r\n      fname: \"\",\r\n      motherName: \"\",\r\n      gender: \"\",\r\n      email: \"\",\r\n      dob: \"\",\r\n      joningDate: \"\",\r\n      phone: \"\",\r\n      maritalStatus: \"\",\r\n      CNIC: \"\",\r\n      qualification: \"\",\r\n      workExperince: \"\",\r\n      religion: \"\",\r\n      epfNo: \"\",\r\n      baiscSalery: \"\",\r\n      workShift: \"\",\r\n      contractType: \"\",\r\n      location: \"\",\r\n      payScal: \"\",\r\n      address1: \"\",\r\n      address2: \"\",\r\n      zipcode: \"\",\r\n      permanentAddress: \"\",\r\n    };\r\n  } else {\r\n    state.row;\r\n    var { row } = state;\r\n  }\r\n\r\n  useEffect(() => {\r\n    const fun = Section(\"class/api\");\r\n    fun.then((res) => {\r\n      setClassObj(res);\r\n    });\r\n    const fun1 = Section(\"class/api/section\");\r\n    fun1.then((res) => {\r\n      setSection(res);\r\n    });\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   const fun = Section(\"class/api\");\r\n  //   fun.then((res) => {\r\n  //     setClassObj(res);\r\n  //   });\r\n  //   const fun1 = Section(\"class/api/section\");\r\n  //   fun1.then((res) => {\r\n  //     setSection(res);\r\n  //   });\r\n  // }, []);\r\n\r\n  const classes = useStyles();\r\n  const methods = useForm({\r\n    defaultValues: {\r\n      staffid: row.staff_id || \"\",\r\n      role: row.Role || \"\",\r\n      firstName: row.first_name || \"\",\r\n      fname: row.father_name || \"\",\r\n      motherName: row.mother_name || \"\",\r\n      gender: row.gender || \"\",\r\n      email: row.email || \"\",\r\n      dob: row.dob || \"\",\r\n      joningDate: row.date_of_joining || \"\",\r\n      phone: row.phone || \"\",\r\n      maritalStatus: row.marital_status || \"\",\r\n      CNIC: row.CNIC_No || \"\",\r\n      qualification: row.qualification || \"\",\r\n      workExperince: row.work_experience || \"\",\r\n      religion: row.religion || \"\",\r\n      epfNo: row.epf_No || \"\",\r\n      baiscSalery: row.basic_salery || \"\",\r\n      workShift: row.work_shift || \"\",\r\n      contractType: row.contract || \"\",\r\n      location: row.location || \"\",\r\n      payScal: row.payscall || \"\",\r\n      address1: row.address1 || \"\",\r\n      address2: row.address2 || \"\",\r\n      zipcode: row.zipCode || \"23610\",\r\n      permanentAddress: row.Per_address || \"\",\r\n\r\n      submit: null,\r\n    },\r\n  });\r\n  const [activeStep, setActiveStep] = useState(0);\r\n  const [skippedSteps, setSkippedSteps] = useState([]);\r\n  const steps = getSteps();\r\n\r\n  const isStepOptional = (step) => {\r\n    return step === 1 || step === 2;\r\n  };\r\n\r\n  const isStepSkipped = (step) => {\r\n    return skippedSteps.includes(step);\r\n  };\r\n\r\n  const handleNext = async (data) => {\r\n\r\n\r\n    // return console.log(data)\r\n    if (activeStep == steps.length - 1) {\r\n      let formData = new FormData();\r\n      formData.append(\"photo\", data.photo);\r\n      formData.append(\"staffid\", data.staffid);\r\n      formData.append(\"role\", data.role);\r\n      formData.append(\"gender\", data.gender);\r\n      formData.append(\"dob\", data.dob);\r\n      formData.append(\"email\", data.email);\r\n      formData.append(\"firstName\", data.firstName);\r\n      formData.append(\"fname\", data.fname);\r\n      formData.append(\"phone\", data.phone);\r\n      formData.append(\"religion\", data.religion);\r\n      formData.append(\"joningDate\", data.joningDate);\r\n      formData.append(\"maritalStatus\", data.maritalStatus);\r\n      formData.append(\"CNIC\", data.CNIC);\r\n      formData.append(\"qualification\", data.qualification);\r\n      formData.append(\"fatherCNIC\", data.fatherCNIC);\r\n      formData.append(\"workExperince\", data.workExperince);\r\n      formData.append(\"epfNo\", data.epfNo);\r\n      formData.append(\"baiscSalery\", data.baiscSalery);\r\n      formData.append(\"workShift\", data.workShift);\r\n      formData.append(\"contractType\", data.contractType);\r\n      formData.append(\"address1\", data.address1);\r\n      formData.append(\"address2\", data.address2);\r\n      formData.append(\"zipcode\", data.zipcode);\r\n      formData.append(\"permanentAddress\", data.permanentAddress);\r\n      formData.append(\"location\", data.location);\r\n      formData.append(\"id\", row.id ? row.id : \"\");\r\n      // formData.append(\"photo\", data.photo);\r\n      //  console.log(formData);\r\n      //  console.log(data.file);\r\n      try {\r\n          await axios\r\n            .post(\"http://localhost:8000/teacher/addupdate\", formData, {\r\n              headers: {\r\n                \"Content-Type\": \"multipart/form-data\",\r\n              },\r\n            })\r\n            .then((res) => {\r\n              res.json;\r\n            })\r\n            .catch((err) => {\r\n              console.log(err);\r\n            });\r\n          toast.success(row.id ? \"Update Data \" : \"Add SuccessFully\");\r\n          // Navigate(\"../teachers\");\r\n        }\r\n        // await customAxios\r\n        //   .postCall(\"teacher/addupdate\", {...data,formData}, {\r\n        //     headers: {\r\n        //       \"Content-Type\": \"multipart/form-data\",\r\n        //     },\r\n        //   })\r\n        //   .then((res) => {\r\n        //     res.json;\r\n        //   });\r\n        // toast.success(row.id ? \" Update Data \" : \"Add SuccessFully\");\r\n        // Navigate(\"../all-students\");\r\n       catch (err) {\r\n        console.log(err);\r\n      }\r\n    } else {\r\n      setActiveStep(activeStep + 1);\r\n      setSkippedSteps(\r\n        skippedSteps.filter((skipItem) => skipItem !== activeStep)\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleBack = () => {\r\n    setActiveStep(activeStep - 1);\r\n  };\r\n\r\n  const handleSkip = () => {\r\n    if (!isStepSkipped(activeStep)) {\r\n      setSkippedSteps([...skippedSteps, activeStep]);\r\n    }\r\n    setActiveStep(activeStep + 1);\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    return console.log(data);\r\n    // await wait(2000);\r\n    // alert(JSON.stringify(data));\r\n    // if (activeStep === steps.length - 1) {\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"file\", data.myFileInput[0]);\r\n    formData.append(\"firstName\", data.firstName);\r\n    formData.append(\"gender\", data.gender);\r\n    formData.append(\"rollno\", data.rollno);\r\n    formData.append(\"dob\", data.dob);\r\n    formData.append(\"email\", data.email);\r\n    formData.append(\"admissiondate\", data.admissiondate);\r\n    formData.append(\"phone\", data.phone);\r\n    formData.append(\"studentCNIC\", data.studentCNIC);\r\n    formData.append(\"religion\", data.religion);\r\n    formData.append(\"classid\", data.classid);\r\n    formData.append(\"sectionid\", data.sectionid);\r\n    formData.append(\"relation\", data.relation);\r\n    formData.append(\"fname\", data.fname);\r\n    formData.append(\"fatherCNIC\", data.fatherCNIC);\r\n    formData.append(\"fatherPhoneNumer\", data.fatherPhoneNumer);\r\n    formData.append(\"foccupation\", data.foccupation);\r\n    formData.append(\"f_Email\", data.f_Email);\r\n    formData.append(\"designation\", data.designation);\r\n    formData.append(\"monthlyIncome\", data.monthlyIncome);\r\n    formData.append(\"address1\", data.address1);\r\n    formData.append(\"address2\", data.address2);\r\n    formData.append(\"zipcode\", data.zipcode);\r\n    formData.append(\"permanentAddress\", data.permanentAddress);\r\n    formData.append(\"balance\", data.balance);\r\n    formData.append(\"discount\", data.discount);\r\n    // formData.append(\"photo\", data.photo);\r\n    console.log(formData);\r\n\r\n    // }\r\n  };\r\n  return (\r\n    <Card>\r\n      <div style={{ padding: 16 }}>\r\n        <Grid\r\n          style={{ paddingBottom: \"10px\", marginTop: 5 }}\r\n          container\r\n          justifyContent=\"center\"\r\n          spacing={3}\r\n        >\r\n          <Typography color=\"textPrimary\" variant=\"h5\">\r\n            Staff Registration Forms\r\n          </Typography>\r\n        </Grid>\r\n\r\n        <Stepper alternativeLabel activeStep={activeStep}>\r\n          {steps.map((step, index) => {\r\n            const labelProps = {};\r\n            const stepProps = {};\r\n            if (isStepOptional(index)) {\r\n              labelProps.optional = (\r\n                <Typography\r\n                  variant=\"caption\"\r\n                  align=\"center\"\r\n                  style={{ display: \"block\" }}\r\n                >\r\n                  optional\r\n                </Typography>\r\n              );\r\n            }\r\n            if (isStepSkipped(index)) {\r\n              stepProps.completed = false;\r\n            }\r\n            return (\r\n              <Step {...stepProps} key={index}>\r\n                <StepLabel {...labelProps}>{step}</StepLabel>\r\n              </Step>\r\n            );\r\n          })}\r\n        </Stepper>\r\n\r\n        {activeStep === steps.length ? (\r\n          <Typography variant=\"h3\" align=\"center\">\r\n            Thank You\r\n          </Typography>\r\n        ) : (\r\n          <>\r\n            <FormProvider {...methods}>\r\n              <form onSubmit={methods.handleSubmit(handleNext)}>\r\n                {getStepContent(activeStep, sectionobj, classObj)}\r\n\r\n                <Button\r\n                  className={classes.button}\r\n                  disabled={activeStep === 0}\r\n                  onClick={handleBack}\r\n                >\r\n                  back\r\n                </Button>\r\n                {isStepOptional(activeStep) && (\r\n                  <Button\r\n                    className={classes.button}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={handleSkip}\r\n                  >\r\n                    skip\r\n                  </Button>\r\n                )}\r\n                <Button\r\n                  className={classes.button}\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  // onClick={handleNext}\r\n                  type=\"submit\"\r\n                >\r\n                  {activeStep === steps.length - 1 ? \"Finish\" : \"Next\"}\r\n                </Button>\r\n              </form>\r\n            </FormProvider>\r\n          </>\r\n        )}\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst BasicForm = ({ sectionobj, classObj }) => {\r\n  const {\r\n    control,\r\n    formState: { errors },\r\n  } = useFormContext();\r\n  return (\r\n    <>\r\n      <Controller\r\n        control={control}\r\n        name=\"staffid\"\r\n        rules={{ required: \"this field is required.\" }}\r\n        render={({ field }) => (\r\n          <TextField\r\n            id=\"staffid\"\r\n            label=\"Staff Id\"\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            margin=\"normal\"\r\n            {...field}\r\n            error={Boolean(errors?.staffid)}\r\n            helperText={errors.staffid?.message}\r\n          />\r\n        )}\r\n      />\r\n      <Controller\r\n        control={control}\r\n        name=\"role\"\r\n        render={({ field }) => (\r\n          <FormControl variant=\"outlined\" fullWidth margin=\"normal\">\r\n            <InputLabel id=\"demo-simple-select-outlined-label-role\">\r\n              Role\r\n            </InputLabel>\r\n            <Select\r\n              labelId=\"demo-simple-select-outlined-label-role\"\r\n              id=\"demo-simple-select-outlined\"\r\n              label=\"Role\"\r\n              {...field}\r\n            >\r\n              {Role.map((option) => (\r\n                <MenuItem key={option.value} value={option.value}>\r\n                  {option.label}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        )}\r\n      />\r\n      <Controller\r\n        control={control}\r\n        name=\"firstName\"\r\n        render={({ field }) => (\r\n          <TextField\r\n            id=\"firstName\"\r\n            label=\"Full Name\"\r\n            variant=\"outlined\"\r\n            placeholder=\"Enter Your  Name\"\r\n            fullWidth\r\n            margin=\"normal\"\r\n            {...field}\r\n          />\r\n        )}\r\n      />\r\n      <Controller\r\n        control={control}\r\n        name=\"fname\"\r\n        render={({ field }) => (\r\n          <TextField\r\n            id=\"fname\"\r\n            label=\"Father Name\"\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            margin=\"normal\"\r\n            {...field}\r\n          />\r\n        )}\r\n      />{\" \"}\r\n      <Controller\r\n        control={control}\r\n        name=\"motherName\"\r\n        render={({ field }) => (\r\n          <TextField\r\n            id=\"motherName\"\r\n            label=\"Mother Name\"\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            margin=\"normal\"\r\n            {...field}\r\n          />\r\n        )}\r\n      />\r\n      <Controller\r\n        control={control}\r\n        name=\"gender\"\r\n        rules={{ required: true }}\r\n        render={({ field }) => (\r\n          <FormControl variant=\"outlined\" fullWidth margin=\"normal\">\r\n            <InputLabel id=\"demo-simple-select-outlined-label\">\r\n              Gender\r\n            </InputLabel>\r\n            <Select\r\n              labelId=\"demo-simple-select-outlined-label\"\r\n              id=\"demo-simple-select-outlined\"\r\n              label=\"Gender\"\r\n              {...field}\r\n            >\r\n              {Genders.map((option) => (\r\n                <MenuItem key={option.value} value={option.label}>\r\n                  {option.label}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        )}\r\n      />\r\n      <Controller\r\n        control={control}\r\n        name=\"dob\"\r\n        render={({ field }) => (\r\n          <TextField\r\n            id=\"dob\"\r\n            type=\"date\"\r\n            label=\"Date of Birth\"\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            margin=\"normal\"\r\n            {...field}\r\n          />\r\n        )}\r\n      />\r\n      <Controller\r\n        control={control}\r\n        name=\"joningDate\"\r\n        render={({ field }) => (\r\n          <TextField\r\n            id=\"joningDate\"\r\n            type=\"date\"\r\n            label=\"Date of Joining\"\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            margin=\"normal\"\r\n            {...field}\r\n          />\r\n        )}\r\n      />\r\n      <Controller\r\n        control={control}\r\n        name=\"email\"\r\n        render={({ field }) => (\r\n          <TextField\r\n            id=\"email\"\r\n            label=\"E-mail\"\r\n            variant=\"outlined\"\r\n            placeholder=\"Enter Your E-mail\"\r\n            fullWidth\r\n            margin=\"normal\"\r\n            {...field}\r\n          />\r\n        )}\r\n      />\r\n      <Controller\r\n        control={control}\r\n        name=\"phone\"\r\n        render={({ field }) => (\r\n          <TextField\r\n            id=\"phone\"\r\n            label=\"Phone\"\r\n            variant=\"outlined\"\r\n            placeholder=\"Enter Your  phone number\"\r\n            fullWidth\r\n            margin=\"normal\"\r\n            {...field}\r\n          />\r\n        )}\r\n      />\r\n      <Controller\r\n        control={control}\r\n        name=\"CNIC\"\r\n        render={({ field }) => (\r\n          <TextField\r\n            id=\"CNIC\"\r\n            label=\" CNIC\"\r\n            variant=\"outlined\"\r\n            placeholder=\"Enter Your  CNIC number\"\r\n            fullWidth\r\n            margin=\"normal\"\r\n            {...field}\r\n          />\r\n        )}\r\n      />\r\n      <Controller\r\n        control={control}\r\n        name=\"maritalStatus\"\r\n        render={({ field }) => (\r\n          <FormControl variant=\"outlined\" fullWidth margin=\"normal\">\r\n            <InputLabel id=\"maritalStatus\">Marital Status</InputLabel>\r\n            <Select\r\n              labelId=\"maritalStatus\"\r\n              id=\"maritalStatus\"\r\n              label=\"Marital Status\"\r\n              {...field}\r\n            >\r\n              {MaritalStatus.map((option) => (\r\n                <MenuItem key={option.value} value={option.value}>\r\n                  {option.label}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        )}\r\n      />\r\n      <Controller\r\n        control={control}\r\n        name=\"qualification\"\r\n        render={({ field }) => (\r\n          <TextField\r\n            id=\"qualification\"\r\n            label=\"Qualification\"\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            margin=\"normal\"\r\n            {...field}\r\n          />\r\n        )}\r\n      />{\" \"}\r\n      <Controller\r\n        control={control}\r\n        name=\"workExperince\"\r\n        render={({ field }) => (\r\n          <TextField\r\n            id=\"workExperince\"\r\n            label=\" work Experince\"\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            margin=\"normal\"\r\n            {...field}\r\n          />\r\n        )}\r\n      />\r\n      <Controller\r\n        control={control}\r\n        name=\"religion\"\r\n        render={({ field }) => (\r\n          <FormControl variant=\"outlined\" fullWidth margin=\"normal\">\r\n            <InputLabel id=\"demo-simple-select-outlined-label-religion\">\r\n              Religion\r\n            </InputLabel>\r\n            <Select\r\n              labelId=\"demo-simple-select-outlined-label-religion\"\r\n              id=\"demo-simple-select-outlined-religion\"\r\n              label=\"Religion\"\r\n              {...field}\r\n            >\r\n              {religions.map((option) => (\r\n                <MenuItem key={option.value} value={option.label}>\r\n                  {option.label}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        )}\r\n      />\r\n    </>\r\n  );\r\n};\r\nconst ContactForm = () => {\r\n  const { control } = useFormContext();\r\n  return (\r\n    <>\r\n      <Controller\r\n        control={control}\r\n        name=\"epfNo\"\r\n        render={({ field }) => (\r\n          <TextField\r\n            id=\"epfNo\"\r\n            label=\"EPF Number\"\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            margin=\"normal\"\r\n            {...field}\r\n          />\r\n        )}\r\n      />\r\n      <Controller\r\n        control={control}\r\n        name=\"baiscSalery\"\r\n        render={({ field }) => (\r\n          <TextField\r\n            id=\"baiscSalery\"\r\n            label=\"Basic Salery\"\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            margin=\"normal\"\r\n            {...field}\r\n          />\r\n        )}\r\n      />{\" \"}\r\n      <Controller\r\n        control={control}\r\n        name=\"workShift\"\r\n        render={({ field }) => (\r\n          <TextField\r\n            id=\"workShift\"\r\n            label=\"Work Shift\"\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            margin=\"normal\"\r\n            {...field}\r\n          />\r\n        )}\r\n      />\r\n      <Controller\r\n        control={control}\r\n        name=\"contractType\"\r\n        render={({ field }) => (\r\n          <FormControl variant=\"outlined\" fullWidth margin=\"normal\">\r\n            <InputLabel id=\"demo-simple-select-outlined-label-contractType\">\r\n              Religion\r\n            </InputLabel>\r\n            <Select\r\n              labelId=\"demo-simple-select-outlined-label-contractType\"\r\n              id=\"demo-simple-select-outlined-contractType\"\r\n              label=\"Contract Type\"\r\n              {...field}\r\n            >\r\n              {Contract.map((option) => (\r\n                <MenuItem key={option.value} value={option.label}>\r\n                  {option.label}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        )}\r\n      />{\" \"}\r\n      <Controller\r\n        control={control}\r\n        name=\"location\"\r\n        render={({ field }) => (\r\n          <TextField\r\n            id=\"location\"\r\n            label=\"Locatoin\"\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            margin=\"normal\"\r\n            {...field}\r\n          />\r\n        )}\r\n      />\r\n      <Controller\r\n        control={control}\r\n        name=\"payScal\"\r\n        render={({ field }) => (\r\n          <TextField\r\n            id=\"payScal\"\r\n            label=\"Pay Scal\"\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            margin=\"normal\"\r\n            {...field}\r\n          />\r\n        )}\r\n      />\r\n    </>\r\n  );\r\n};\r\nconst PersonalForm = () => {\r\n  const { control } = useFormContext();\r\n  return (\r\n    <>\r\n      <Controller\r\n        control={control}\r\n        name=\"address1\"\r\n        render={({ field }) => (\r\n          <TextField\r\n            id=\"address1\"\r\n            label=\"Address 1\"\r\n            variant=\"outlined\"\r\n            placeholder=\"Enter Your Address 1\"\r\n            fullWidth\r\n            margin=\"normal\"\r\n            {...field}\r\n          />\r\n        )}\r\n      />\r\n      <Controller\r\n        control={control}\r\n        name=\"address2\"\r\n        render={({ field }) => (\r\n          <TextField\r\n            id=\"address2\"\r\n            label=\"Address 2\"\r\n            variant=\"outlined\"\r\n            placeholder=\"Enter Your Address 2\"\r\n            fullWidth\r\n            margin=\"normal\"\r\n            {...field}\r\n          />\r\n        )}\r\n      />\r\n      <Controller\r\n        control={control}\r\n        name=\"zipcode\"\r\n        render={({ field }) => (\r\n          <TextField\r\n            id=\"zipcode\"\r\n            label=\"Zip Code\"\r\n            variant=\"outlined\"\r\n            placeholder=\"Enter Your Country Name\"\r\n            fullWidth\r\n            margin=\"normal\"\r\n            {...field}\r\n          />\r\n        )}\r\n      />\r\n      <Controller\r\n        control={control}\r\n        name=\"permanentAddress\"\r\n        render={({ field }) => (\r\n          <TextField\r\n            id=\"permanentAddress\"\r\n            label=\"Permanent Address\"\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            margin=\"normal\"\r\n            {...field}\r\n          />\r\n        )}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nconst Document = () => {\r\n  const { control } = useFormContext();\r\n  const { register, setValue } = useFormContext();\r\n  const [imagePreview, setImagePreview] = useState(null);\r\n\r\n  const handleFileChange = (event) => {\r\n    const file = event.target.files[0];\r\n\r\n    if (file) {\r\n      // Create a new FileReader object\r\n      const reader = new FileReader();\r\n\r\n      // Set the callback function for when the file is loaded\r\n      reader.onload = (event) => {\r\n        // Set the image preview to the loaded image data URL\r\n        setImagePreview(event.target.result);\r\n        // Set the form value to the uploaded file\r\n        setValue(\"photo\", file);\r\n      };\r\n\r\n      // Read the file as a data URL\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <Box>\r\n        <Card>\r\n          {imagePreview ? (\r\n            <CardMedia\r\n              component=\"img\"\r\n              src={imagePreview}\r\n              height=\"200\"\r\n              alt=\"Selected Image Preview\"\r\n            />\r\n          ) : (\r\n            <CardContent>\r\n              <Typography variant=\"body1\">\r\n                Select an Image to Preview\r\n              </Typography>\r\n            </CardContent>\r\n          )}\r\n          <CardContent>\r\n            <Button variant=\"contained\" component=\"label\">\r\n              Upload File\r\n              <input\r\n                type=\"file\"\r\n                hidden\r\n                {...register(\"photo\")}\r\n                onChange={handleFileChange}\r\n              />\r\n            </Button>\r\n          </CardContent>\r\n        </Card>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\nfunction getStepContent(step, sectionobj, classObj) {\r\n  switch (step) {\r\n    case 0:\r\n      return <BasicForm />;\r\n\r\n    case 1:\r\n      return <ContactForm />;\r\n    case 2:\r\n      return <PersonalForm />;\r\n    case 3:\r\n      return <Document />;\r\n    default:\r\n      return \"unknown step\";\r\n  }\r\n}\r\n\r\nexport default StudentAdmissionForm;\r\n","import axios from \"axios\";\r\nimport wait from \"../../utils/wait\";\r\n//attach authorization token and other common stuffs\r\n\r\nlet token = JSON.parse(localStorage.getItem(\"accessToken\")) ;\r\n// let token = localStorage.getItem(\"accessToken\")\r\n//   ? JSON.parse(localStorage.getItem(\"accessToken\"))\r\n//   : null;\r\n\r\n  // console.log(token)\r\nexport default (navigate = null) => {\r\n  const customAxios = axios.create({\r\n    baseURL: \"http://localhost:8000/\",\r\n    headers: {\r\n      authorization: `bearer ${token}`,\r\n    },\r\n  });\r\n\r\nfunction getTokenFromLocalStorage() {\r\n  const token = localStorage.getItem(\"accessToken\");\r\n  console.log(\"the token from local storage is -> \" + token);\r\n  if (token === null) {\r\n    return undefined;\r\n  }\r\n  return token;\r\n}\r\n\r\n\r\n  customAxios.interceptors.response.use(\r\n    (response) =>\r\n      new Promise((resolve, reject) => {\r\n        resolve(response);\r\n      }),\r\n    (error) => {\r\n     if (!error.response) { \r\n       return new Promise((resolve, reject) => {\r\n         reject(error);\r\n       });\r\n     }\r\n      if (error.response.status == 401) {\r\n        console.log(\"your are not logedin\");\r\n        // localStorage.removeItem(\"accessToken\");\r\n        // localStorage.removeItem(\"user\");\r\n        // if(navigate){\r\n        //   navigate(\"/authentication/login-unguarded\");\r\n        // }else{\r\n        //   window.location.href = \"/authentication/login-unguarded\";\r\n        // }\r\n      }\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n  return customAxios\r\n};\r\n\r\n","import axios from \"axios\";\r\nimport {customAxios} from \"./apis/Axios\";\r\nimport userService from \"./apis/userService\";\r\n\r\nexport const Section = async (endpoint) => {\r\n  const responce = await customAxios.getCall(`${endpoint}`);\r\n  const section = await responce;\r\n  return section;\r\n};\r\n\r\n// export const getAPI = async (endpoint, params={}) => {\r\n//   const responce = await axios.get(`${URL}${endpoint}`, {params:{...params}});\r\n//   // console.log(b.data)\r\n//   const section = await responce.data;\r\n//   return section;\r\n// };\r\n\r\n// export const postAPI = async (endpoint, data= {}) => {\r\n//   const responce = await axios.post(`${URL}${endpoint}`, {...data});\r\n//   // console.log(b.data)\r\n//   const section = await responce.data;\r\n//   return section;\r\n// };\r\n"],"sourceRoot":""}